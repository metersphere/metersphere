<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.BaseProjectMapper">
    <sql id="condition">
        <include refid="io.metersphere.base.mapper.ext.ExtCommonsMapper.condition"/>
    </sql>
    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            AND p.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            AND p.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            AND p.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            AND p.create_user
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="getProjectWithWorkspace" resultType="io.metersphere.dto.ProjectDTO">
        SELECT p.id,
               p.workspace_id,
               p.name,
               p.description,
               p.update_time,
               p.issue_template_id,
               p.case_template_id,
               p.create_time,
               w.id               AS workspaceId,
               w.name             AS workspaceName,
               p.tapd_id,
               p.jira_key,
               p.zentao_id,
               p.azure_devops_id,
               p.azure_filter_id,
               user.name          AS createUserName,
               p.platform,
               p.third_part_template,
               p.issue_config,
               p.api_template_id
        FROM project p
                     JOIN workspace w ON p.workspace_id = w.id
                     LEFT JOIN user ON user.id = p.create_user
        <where>
            <if test="proRequest.combine != null">
                <include refid="combine">
                    <property name="condition" value="proRequest.combine"/>
                    <property name="name" value="proRequest.name"/>
                </include>
            </if>
            <if test="proRequest.filters != null and proRequest.filters.size() > 0">
                <foreach collection="proRequest.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key == 'create_user'">
                                AND p.create_user IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'project_id'">
                                AND p.id IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'workspace_id'">
                                AND p.workspace_id IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'tapd_id'">
                                AND p.platform  = 'Tapd'
                                AND p.tapd_id IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'jira_key'">
                                AND p.platform  = 'Jira'
                                AND p.issue_config -> '$.jiraKey' IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'zentao_id'">
                                AND p.platform  = 'Zentao'
                                AND p.issue_config -> '$.zentaoId' IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'azure_devops_id'">
                                AND p.platform = 'AzureDevops'
                                AND p.azure_devops_id IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
            <if test="proRequest.name != null and proRequest.name != ''">
                AND p.name LIKE #{proRequest.name, jdbcType=VARCHAR}
            </if>
            <if test="proRequest.workspaceId != null">
                AND w.id = #{proRequest.workspaceId}
            </if>
            <if test="proRequest.projectId != null">
                AND p.id = #{proRequest.projectId}
            </if>
        </where>
        <if test="proRequest.orders != null and proRequest.orders.size() > 0">
            ORDER BY
            <foreach collection="proRequest.orders" separator="," item="order">
                p.${order.name} ${order.type}
            </foreach>
        </if>
    </select>
    <select id="getProjectIdByWorkspaceId" resultType="java.lang.String">
        SELECT id
        FROM project
        WHERE workspace_id = #{workspaceId}
    </select>
    <select id="getUserProject" resultType="io.metersphere.base.domain.Project">
        SELECT DISTINCT p.*
        FROM `group` g
                     JOIN user_group ug ON g.id = ug.group_id
                     JOIN project p ON p.id = ug.source_id
        <where>
            g.type = 'PROJECT'
                    AND ug.user_id = #{proRequest.userId}
            <if test="proRequest.workspaceId != null and proRequest.workspaceId != ''">
                AND p.workspace_id = #{proRequest.workspaceId}
            </if>
            <if test="proRequest.name != null and proRequest.name != ''">
                AND p.name LIKE #{proRequest.name, jdbcType=VARCHAR}
            </if>
        </where>
    </select>
    <select id="getSystemIdByProjectId" resultType="java.lang.String">
        SELECT system_id
        FROM project
        WHERE id = #{0}
    </select>
    <select id="getProjectIds" resultType="java.lang.String">
        SELECT id
        FROM project;
    </select>

    <select id="getMaxSystemId" resultType="java.lang.String">
        SELECT MAX(system_id)
        FROM project
    </select>
    <select id="queryNameByIds" resultType="io.metersphere.base.domain.Project">
        SELECT id, name
        FROM project
                WHERE id IN
        <foreach collection="ids" item="id" index="index"
                 open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <update id="removeIssuePlatform">
        UPDATE project
        <set>
            <if test="platform == 'Jira'">
                jira_key = NULL
            </if>
            <if test="platform == 'Tapd'">
                tapd_id = NULL

            </if>
            <if test="platform == 'Zentao'">

                zentao_id = NULL

            </if>
            <if test="platform == 'AzureDevops'">

                azure_devops_id = NULL
            </if>
        </set>
        WHERE project.id IN (SELECT id FROM (SELECT id
                FROM project
                WHERE workspace_id = #{workspaceId}) AS a)
    </update>
    <update id="updateUseDefaultCaseTemplateProject">
        update project set case_template_id = #{templateId}
        where (case_template_id = #{originId} or case_template_id is null or case_template_id = '')
        and id = #{projectId}
    </update>

    <select id="selectProjectByResourceId" resultType="io.metersphere.base.domain.Project">
        SELECT *
        FROM project
        WHERE id IN (
                SELECT project_id
                FROM test_plan
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM test_case_review
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM issues
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM test_plan_report
                             JOIN test_plan tp ON tp.id = test_plan_report.test_plan_id
                WHERE test_plan_report.id = #{resourceId}
                UNION
                SELECT project_id
                FROM test_case
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM swagger_url_project
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM api_scenario
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM api_definition
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM api_test_case
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM api_scenario_report
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM load_test
                WHERE id = #{resourceId}
                UNION
                SELECT project_id
                FROM load_test_report
                WHERE id = #{resourceId})
        LIMIT 1
    </select>
    <select id="getProjectMemberSize" resultType="java.lang.Long">
        SELECT count(distinct (`user`.id)) FROM user_group JOIN `user` ON user_group.user_id = `user`.id
        WHERE user_group.source_id = #{projectId}
    </select>
    <select id="getProjectByUserId" resultType="io.metersphere.base.domain.Project">
        SELECT * from project where project.id in (SELECT user_group.source_id from user_group where user_group.user_id = #{userId})
    </select>
    <select id="getProjectPlanBugSize" resultType="java.lang.Integer">
        select count(distinct (tci.issues_id))
        from test_plan_test_case tptc
                 join test_case_issues tci on tptc.id = tci.resource_id
                 right join test_case on test_case.id = tci.ref_id
                 join issues on tci.issues_id = issues.id
                 join test_plan on tptc.plan_id = test_plan.id
        where test_plan.project_id = #{projectId}
          and (issues.status != 'closed' or issues.status is null)
          and test_case.status != 'Trash';
    </select>
    <select id="queryListByIds" resultType="io.metersphere.dto.ProjectDTO">
        SELECT p.id,
        p.workspace_id,
        p.name,
        p.description,
        p.update_time,
        p.issue_template_id,
        p.case_template_id,
        p.create_time,
        w.id               AS workspaceId,
        w.name             AS workspaceName,
        p.tapd_id,
        p.jira_key,
        p.zentao_id,
        p.azure_devops_id,
        p.azure_filter_id,
        user.name          AS createUserName,
        p.platform, p.third_part_template,
        p.issue_config
        FROM project p
        JOIN workspace w ON p.workspace_id = w.id
        LEFT JOIN user ON user.id = p.create_user
        WHERE p.id IN
        <foreach collection="ids" item="id" index="index"
                 open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="getThirdPartProjectIds" resultType="java.lang.String">
        select id from project where platform != 'Local';
    </select>
    <insert id="setDefaultMessageTask">
        INSERT INTO message_task (id, type, event, user_id, task_type, webhook, identification, is_set, project_id,
        test_id, create_time, template)
        VALUES (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'PERFORMANCE_TEST_TASK', '',
        'ce692111-166b-491a-ae69-f047c31de971', 0,
        #{projectId}, NULL, 1629686472659, NULL),
        (UUID(), 'IN_SITE', 'COMPLETE', 'CREATOR', 'REVIEW_TASK',
        '',
        '72836b2d-4c2f-4185-95aa-1894c6f0d1c3', 0, #{projectId}, NULL, 1629697096803,
        NULL),
        (UUID(), 'IN_SITE', 'CLOSE_SCHEDULE', 'CREATOR', 'TRACK_HOME_TASK', '',
        'ceb0aeb5-f194-4183-a995-3607a769c61d',
        0, #{projectId}, NULL, 1629705930753, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'API_AUTOMATION_TASK', '',
        'e2865464-0da3-42bc-a041-7d21bd70d339', 0,
        #{projectId}, NULL, 1629446356866, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'FOLLOW_PEOPLE', 'PERFORMANCE_TEST_TASK', '',
        '79d7dcdc-68a2-47a2-9ef5-21fdf9bde65c', 0, #{projectId}, NULL, 1629446379928,
        NULL),
        (UUID(), 'IN_SITE', 'CLOSE_SCHEDULE', 'CREATOR', 'API_HOME_TASK', '',
        'dbe5dfcd-927f-4065-93cf-22f33d9570ac', 0,
        #{projectId}, NULL, 1629446330438, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'FOLLOW_PEOPLE', 'TRACK_TEST_CASE_TASK', '',
        '3a632784-c73b-4f5f-824c-bdf4fccf6f4d', 0, #{projectId}, NULL, 1629705939795,
        NULL),
        (UUID(), 'IN_SITE', 'CASE_UPDATE', 'FOLLOW_PEOPLE', 'API_DEFINITION_TASK', '',
        'a6a3979a-bd80-414c-a253-06f0364c434f', 0, #{projectId}, NULL, 1629446346104,
        NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'FOLLOW_PEOPLE', 'API_AUTOMATION_TASK', '',
        '019de091-1a19-4b30-bd5e-23b83bc820fb',
        0, #{projectId}, NULL, 1629618010742, NULL),
        (UUID(), 'IN_SITE', 'CASE_UPDATE', 'CREATOR', 'API_DEFINITION_TASK', '',
        'a6a3979a-bd80-414c-a253-06f0364c434f',
        0, #{projectId}, NULL, 1629446346104, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'DEFECT_TASK', '', '66568b56-4f9e-4bf6-8621-7402403368b9', 0,
        #{projectId}, NULL, 1629446306675, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'FOLLOW_PEOPLE', 'PERFORMANCE_TEST_TASK', '',
        'ce692111-166b-491a-ae69-f047c31de971', 0, #{projectId}, NULL, 1629686472659,
        NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'DEFECT_TASK', '', '3a913f72-7cee-4e36-ae1d-0443c7cb5f97', 0,
        #{projectId}, NULL, 1629699608062, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'FOLLOW_PEOPLE', 'API_DEFINITION_TASK', '',
        '7ca324cd-7113-412b-8714-5cbe1bffa535',
        0, #{projectId}, NULL, 1629706088088, NULL),
        (UUID(), 'IN_SITE', 'CASE_DELETE', 'CREATOR', 'API_DEFINITION_TASK', '',
        'aeb9d21a-855c-44d3-a715-dfb1bba8ad6c',
        0, #{projectId}, NULL, 1629446334332, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'API_REPORT_TASK', '', '4d3309f3-7ab2-492e-b9c9-1127c3e005d1',
        0,
        #{projectId}, NULL, 1629446364391, NULL),
        (UUID(), 'IN_SITE', 'COMMENT', 'CREATOR', 'TRACK_TEST_CASE_TASK', '',
        '2e8db54f-2d39-42a6-9832-43bb3384e7d5', 0,
        #{projectId}, NULL, 1629446247833, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'API_DEFINITION_TASK', '',
        '90f2be5d-0a71-44f0-a750-f16bf39d690b', 0,
        #{projectId}, NULL, 1629446338557, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'PERFORMANCE_REPORT_TASK', '',
        '4c1bfa4a-b02b-4e8e-bc09-b13613723a11',
        0, #{projectId}, NULL, 1629446384995, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'API_AUTOMATION_TASK', '',
        '019de091-1a19-4b30-bd5e-23b83bc820fb', 0,
        #{projectId}, NULL, 1629618010742, NULL),
        (UUID(), 'IN_SITE', 'COMPLETE', 'CREATOR', 'TEST_PLAN_TASK', '', '86b42beb-a86f-4ff3-a73c-d25112c2f104',
        0,
        #{projectId}, NULL, 1629446286106, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'PERFORMANCE_TEST_TASK', '',
        '79d7dcdc-68a2-47a2-9ef5-21fdf9bde65c', 0,
        #{projectId}, NULL, 1629446379928, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'TRACK_TEST_CASE_TASK', '',
        '3a632784-c73b-4f5f-824c-bdf4fccf6f4d', 0,
        #{projectId}, NULL, 1629705939795, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'API_DEFINITION_TASK', '',
        '7ca324cd-7113-412b-8714-5cbe1bffa535', 0,
        #{projectId}, NULL, 1629706088088, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'TEST_PLAN_TASK', '', '04ea4fbd-a392-4f80-a61c-51d31a302cac', 0,
        #{projectId}, NULL, 1629446289522, NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'CREATOR', 'REVIEW_TASK', '', 'db515209-f864-46d3-a2e5-63db6d1339c3', 0,
        #{projectId}, NULL, 1629446276516, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'TRACK_REPORT_TASK', '', 'ea2fee85-8a44-413a-a128-16bfa01ada0d',
        0,
        #{projectId}, NULL, 1629283758941, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'REVIEW_TASK', '', 'f9b1f60b-6dee-48af-8217-0428b27dcbab', 0,
        #{projectId}, NULL, 1629446272477, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'CREATOR', 'TRACK_TEST_CASE_TASK', '',
        '7c26254e-85e9-4269-be13-a2ffcfe0b9f5', 0,
        #{projectId}, NULL, 1629446251939, NULL),
        (UUID(), 'IN_SITE', 'DELETE', 'FOLLOW_PEOPLE', 'TRACK_TEST_CASE_TASK', '',
        '7c26254e-85e9-4269-be13-a2ffcfe0b9f5', 0, #{projectId}, NULL, 1629446251939,
        NULL),
        (UUID(), 'IN_SITE', 'EXECUTE_SUCCESSFUL', 'CREATOR', 'API_DEFINITION_TASK', '',
        '7efddbdb-2b6c-4425-96a4-0bc2aa9e2cd2', 0, #{projectId}, NULL, 1629775183917,
        NULL),
        (UUID(), 'IN_SITE', 'EXECUTE_FAILED', 'CREATOR', 'API_DEFINITION_TASK', '',
        'e508035c-1318-40ea-9457-0bbe9865f4ce', 0, #{projectId}, NULL, 1629775194857,
        NULL),
        (UUID(), 'IN_SITE', 'EXECUTE_COMPLETED', 'CREATOR', 'PERFORMANCE_TEST_TASK', '',
        'e3db90c6-fb49-4e89-bc25-1d14b5ce94d0', 0, #{projectId}, NULL, 1629790602744,
        NULL),
        (UUID(), 'IN_SITE', 'EXECUTE_FAILED', 'CREATOR', 'API_AUTOMATION_TASK', '',
        'c25930e8-b617-45f7-af5e-cc94adc14192', 0, #{projectId}, NULL, 1629780485724,
        NULL),
        (UUID(), 'IN_SITE', 'EXECUTE_SUCCESSFUL', 'CREATOR', 'API_AUTOMATION_TASK', '',
        '9f91e5e5-1744-4160-bfc6-3851bfd59e05', 0, #{projectId}, NULL, 1629780475764,
        NULL),
        (UUID(), 'IN_SITE', 'UPDATE', 'PROCESSOR', 'DEFECT_TASK', '',
        '6cad944e-db8d-4786-9ef3-7d6370940325', 0, #{projectId}, NULL, 1629791388405,
        NULL),
        (UUID(), 'IN_SITE', 'CREATE', 'PROCESSOR', 'DEFECT_TASK', '',
        '4a890e41-e755-44fc-b734-d6a0ca25a65c', 0, #{projectId}, NULL, 1629790487682,
        NULL)
    </insert>

    <select id="getProjectForCustomField" resultType="io.metersphere.base.domain.Project">
        select id, platform, third_part_template from project where workspace_id = #{workspaceId}
    </select>
    <select id="queryWorkNameByProjectIds" resultType="io.metersphere.base.domain.Workspace">
        SELECT project.id, workspace.name
        FROM project inner join workspace on project.workspace_id = workspace.id
        WHERE project.id IN
        <foreach collection="ids" item="id" index="index"
                 open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="selectOne" resultType="io.metersphere.base.domain.Project">
        SELECT * FROM project LIMIT 1
    </select>
</mapper>

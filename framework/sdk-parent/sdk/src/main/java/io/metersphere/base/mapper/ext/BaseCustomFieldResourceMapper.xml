<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.BaseCustomFieldResourceMapper">
    <sql id="Base_Column_List">
        resource_id, field_id, `value`
    </sql>
    <sql id="Blob_Column_List">
        text_value
    </sql>
    <insert id="insert">
        insert into ${tableName} (resource_id, field_id, `value`,
                                            text_value)
        values (#{record.resourceId,jdbcType=VARCHAR}, #{record.fieldId,jdbcType=VARCHAR}, #{record.value,jdbcType=VARCHAR},
                #{record.textValue,jdbcType=LONGVARCHAR})
    </insert>
    <update id="updateByPrimaryKeySelective">
        update ${tableName}
        <include refid="updateValueColumn"/>
        where resource_id = #{record.resourceId,jdbcType=VARCHAR}
        and field_id = #{record.fieldId,jdbcType=VARCHAR}
    </update>

    <sql id="updateValueColumn">
        <set>
            <if test="record.value != null">
                `value` = #{record.value,jdbcType=VARCHAR},
            </if>
            <if test="record.textValue != null">
                text_value = #{record.textValue,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.value == null and record.textValue == null">
                `value` = null and text_value = null
            </if>
        </set>
    </sql>
    <update id="batchUpdateByResourceIds">
        update ${tableName}
        <include refid="updateValueColumn"/>
        where field_id = #{record.fieldId} and resource_id in
        <foreach collection="resourceIds" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
    </update>
    <update id="batchInsertIfNotExists">
        INSERT INTO ${tableName} (resource_id, field_id, `value`, text_value)
        SELECT
            '${record.resourceId}',
            '${record.fieldId}',
            '${record.value}',
            '${record.textValue}'
        FROM DUAL
        WHERE NOT EXISTS(
            select resource_id
            from ${tableName}
            where resource_id = #{record.resourceId} and field_id = #{record.fieldId}
        )
    </update>
    <delete id="deleteByResourceId">
        delete from ${tableName}
        where resource_id = #{resourceId}
    </delete>
    <delete id="deleteByResourceIds">
        delete from ${tableName}
        where resource_id in
        <foreach collection="resourceIds" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
    </delete>
    <select id="getByResourceId" resultType="io.metersphere.dto.CustomFieldResourceDTO">
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from ${tableName}
        where resource_id = #{resourceId}
    </select>
    <select id="getByResourceIds" resultType="io.metersphere.dto.CustomFieldResourceDTO">
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from ${tableName}
        where resource_id in
        <foreach collection="resourceIds" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
    </select>
    <select id="countFieldResource" resultType="java.lang.Long">
        select count(1) from ${tableName} where resource_id = #{resourceId} and field_id = #{fieldId}
    </select>
</mapper>

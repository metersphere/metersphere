<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestCaseMapper">

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test='${condition}.id != null'>
            and (test_case.num
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
            or test_case.custom_num
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
            )
        </if>
        <if test="${condition}.followPeople != null">
            and test_case.id in (
            select case_id from test_case_follow where follow_id
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.followPeople"/>
            </include>
            )
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.moduleIds != null">
            and test_case.node_id
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.moduleIds"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.method != null">
            and test_case.method
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.create_user
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "not like"'>
            and (test_case.tags is null or test_case.tags
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.tags"/>
            </include>
            )
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "like"'>
            and test_case.tags
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.tags"/>
            </include>
        </if>
        <if test="${condition}.reviewStatus != null">
            and test_case.review_status
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.reviewStatus"/>
            </include>
        </if>
        <if test="${condition}.demand != null">
            <if test="${condition}.demand.operator == 'third_platform'">
                and test_case.demand_id in
                <foreach collection="${condition}.demand.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </if>
            <if test="${condition}.demand.operator == 'other_platform'">
                and test_case.demand_name like CONCAT('%', #{${condition}.demand.value},'%')
            </if>
        </if>
        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                and test_case.id ${custom.operator} (
                    select resource_id from custom_field_test_case where field_id = #{custom.id}
                    <choose>
                        <when test="custom.type == 'multipleMember' or custom.type == 'checkbox' or custom.type == 'multipleSelect'">
                            and ${custom.value}
                        </when>
                        <when test="custom.type == 'date' or custom.type == 'datetime'">
                            and left(replace(unix_timestamp(trim(both '"' from `value`)), '.', ''), 13)
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <when test="custom.type == 'richText' or custom.type == 'textarea'">
                            and text_value
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <otherwise>
                            and trim(both '"' from value)
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </otherwise>
                    </choose>
                )
            </foreach>
        </if>
    </sql>

    <sql id="notInQueryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.testCaseContainIds != null and request.testCaseContainIds.size() > 0">
                and test_case.id not in
                <foreach collection="request.testCaseContainIds" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.projectId != null">
                AND test_case.project_id = #{request.projectId}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                AND test_case.node_id IN
                <foreach collection="request.nodeIds" open="(" close=")" separator="," item="nodeId">
                    #{nodeId}
                </foreach>
            </if>
            <include refid="queryVersionCondition">
                <property name="versionTable" value="test_case"/>
            </include>
            <include refid="filters"/>
        </where>
    </sql>

    <select id="moduleCount" resultType="java.lang.Integer">
        select count(test_case.id) from test_case
        left join project on test_case.project_id = project.id
        <include refid="queryWhereConditionWidthProject"/>
    </select>
    <select id="getCountFollow" resultType="java.lang.Integer">
        select count(*) from test_case tc where
        tc.id in (select tf.case_id from test_case_follow  tf where  tf.follow_id = #{userId,jdbcType=VARCHAR})
                                    and
        tc.project_id  in
        <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
            #{projectId}
        </foreach>
        and (tc.status is null or tc.status != 'Trash');
    </select>
    <select id="getCountUpcoming" resultType="java.lang.Integer">
        select count(*) from test_case tc where
        tc.project_id  in
        <foreach collection="projectIds" item="projectId" separator="," open="(" close=")">
            #{projectId}
        </foreach>
        and tc.review_status in ('Prepare','Pass','UnPass')
        and tc.create_user = #{userId,jdbcType=VARCHAR}
        and (tc.status is null or tc.status != 'Trash');
    </select>

    <sql id="queryPublicCaseWhere">
        <where>
            <include refid="filters"/>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>

            <if test="request.statusIsNot != null">
                and test_case.status != #{request.statusIsNot}
            </if>

            <if test="request.notEqStatus != null">
                and test_case.status != #{request.notEqStatus}
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.ids != null">
                and test_case.id in
                <foreach collection="request.ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.relevanceCreateTime >0">
                and test_case.id in (select test_case_id from test_case_test where test_case_test.create_time >=
                #{request.createTime})
            </if>
            <if test="request.createTime >0">
                and test_case.create_time >= #{request.createTime}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            and test_case.case_public = TRUE
            <include refid="filters"/>
            <if test="request.caseCoverage == 'uncoverage' ">
                and test_case.id not in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
            <if test="request.caseCoverage == 'coverage' ">
                and test_case.id in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
            <include refid="queryVersionCondition">
                <property name="versionTable" value="test_case"/>
            </include>
        </where>
    </sql>

    <sql id="filters">
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='priority'">
                            and test_case.priority in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='type'">
                            and test_case.type in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='review_status'">
                            and test_case.review_status in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='last_execute_result'">
                            and test_case.last_execute_result in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='status'">
                            and test_case.status in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='method'">
                            and test_case.method in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='version_id'">
                            and test_case.version_id in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='maintainer'">
                            and test_case.maintainer in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key.startsWith('custom_single')">
                            and test_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_single-',field_id) = #{key}
                            and trim(both '"' from value) in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <when test="key.startsWith('custom_multiple')">
                            and test_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_multiple-',field_id) = #{key}
                            and
                            <foreach collection="values" item="value" separator="or" open="(" close=")">
                                JSON_CONTAINS(value, #{value})
                            </foreach>
                            )
                        </when>
                        <when test="key=='create_user'">
                            and test_case.create_user in
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                        </when>
                    </choose>
                </if>
                <if test="key=='status' and (values == null || values.size() == 0)">
                    and test_case.status != 'Trash'
                </if>
            </foreach>
        </if>
        <if test="request.filters == null || request.filters.size() == 0 || !request.filters.containsKey('status')">
            and test_case.status != 'Trash'
        </if>
    </sql>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>

            <if test="request.statusIsNot != null">
                and test_case.status != #{request.statusIsNot}
            </if>

            <if test="request.notEqStatus != null">
                and test_case.status != #{request.notEqStatus}
            </if>
            <if test="request.casePublic != null and request.casePublic == true">
                and test_case.case_public = true
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.ids != null and request.ids.size() > 0">
                and test_case.id in
                <foreach collection="request.ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.notInIds != null and request.notInIds.size() > 0">
                and test_case.id not in
                <foreach collection="request.notInIds" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.relevanceCreateTime >0">
                and test_case.id in (select test_case_id from test_case_test where test_case_test.create_time >=
                #{request.createTime})
            </if>
            <if test="request.createTime >0">
                and test_case.create_time >= #{request.createTime}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.projectId != null">
                and test_case.project_id = #{request.projectId}
            </if>
            <include refid="filters"/>
            <if test="request.caseCoverage == 'uncoverage' ">
                and test_case.id not in (
                SELECT test_case_id FROM test_case_test WHERE test_type = 'testCase' and test_id IN (select id FROM
                api_test_case WHERE `STATUS` is null or status != 'Trash')
                UNION
                SELECT test_case_id FROM test_case_test WHERE test_type = 'performance' and test_id IN (select id from
                load_test)
                UNION
                SELECT test_case_id FROM test_case_test WHERE test_type = 'automation' and test_id IN (select id FROM
                api_scenario WHERE `STATUS` != 'Trash')
                )
            </if>
            <if test="request.caseCoverage == 'coverage' ">
                and test_case.id in (
                SELECT test_case_id FROM test_case_test WHERE test_type = 'testCase' and test_id IN (select id FROM
                api_test_case WHERE `STATUS` is null or status != 'Trash')
                UNION
                SELECT test_case_id FROM test_case_test WHERE test_type = 'performance' and test_id IN (select id from
                load_test)
                UNION
                SELECT test_case_id FROM test_case_test WHERE test_type = 'automation' and test_id IN (select id FROM
                api_scenario WHERE `STATUS` != 'Trash')
                )
            </if>
            <include refid="queryVersionCondition">
                <property name="versionTable" value="test_case"/>
            </include>
        </where>
    </sql>

    <sql id="queryWhereConditionWidthProject">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>

            <if test="request.statusIsNot != null">
                and test_case.status != #{request.statusIsNot}
            </if>

            <if test="request.notEqStatus != null">
                and test_case.status != #{request.notEqStatus}
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.ids != null">
                and test_case.id in
                <foreach collection="request.ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.relevanceCreateTime >0">
                and test_case.id in (select test_case_id from test_case_test where test_case_test.create_time >=
                #{request.createTime})
            </if>
            <if test="request.createTime >0">
                and test_case.create_time >= #{request.createTime}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                and test_case.project_id = #{request.projectId}
            </if>
            <include refid="filters"/>
            <if test="request.caseCoverage == 'uncoverage' ">
                and test_case.id not in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
            <if test="request.caseCoverage == 'coverage' ">
                and test_case.id in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
            <include refid="queryVersionCondition">
                <property name="versionTable" value="test_case"/>
            </include>
        </where>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.refId != null">
            and ${versionTable}.ref_id = #{request.refId}
        </if>
        <if test="request.versionId == null and request.refId == null">
            AND ${versionTable}.latest = 1
        </if>
    </sql>

</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.api.mapper.ApiDefinitionMockMapper">
  <resultMap id="BaseResultMap" type="io.metersphere.api.domain.ApiDefinitionMock">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="api_path" jdbcType="VARCHAR" property="apiPath" />
    <result column="api_method" jdbcType="VARCHAR" property="apiMethod" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="tags" jdbcType="VARCHAR" property="tags" />
    <result column="enable" jdbcType="BIT" property="enable" />
    <result column="expect_num" jdbcType="VARCHAR" property="expectNum" />
    <result column="project_id" jdbcType="VARCHAR" property="projectId" />
    <result column="api_definition_id" jdbcType="VARCHAR" property="apiDefinitionId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, api_path, api_method, create_time, update_time, create_user, `name`, tags, `enable`, 
    expect_num, project_id, api_definition_id
  </sql>
  <select id="selectByExample" parameterType="io.metersphere.api.domain.ApiDefinitionMockExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_definition_mock
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from api_definition_mock
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from api_definition_mock
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="io.metersphere.api.domain.ApiDefinitionMockExample">
    delete from api_definition_mock
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.metersphere.api.domain.ApiDefinitionMock">
    insert into api_definition_mock (id, api_path, api_method, 
      create_time, update_time, create_user, 
      `name`, tags, `enable`, expect_num, 
      project_id, api_definition_id)
    values (#{id,jdbcType=VARCHAR}, #{apiPath,jdbcType=VARCHAR}, #{apiMethod,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, #{createUser,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR}, #{enable,jdbcType=BIT}, #{expectNum,jdbcType=VARCHAR}, 
      #{projectId,jdbcType=VARCHAR}, #{apiDefinitionId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.metersphere.api.domain.ApiDefinitionMock">
    insert into api_definition_mock
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="apiPath != null">
        api_path,
      </if>
      <if test="apiMethod != null">
        api_method,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="tags != null">
        tags,
      </if>
      <if test="enable != null">
        `enable`,
      </if>
      <if test="expectNum != null">
        expect_num,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="apiDefinitionId != null">
        api_definition_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="apiPath != null">
        #{apiPath,jdbcType=VARCHAR},
      </if>
      <if test="apiMethod != null">
        #{apiMethod,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="tags != null">
        #{tags,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=BIT},
      </if>
      <if test="expectNum != null">
        #{expectNum,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="apiDefinitionId != null">
        #{apiDefinitionId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.metersphere.api.domain.ApiDefinitionMockExample" resultType="java.lang.Long">
    select count(*) from api_definition_mock
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_definition_mock
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.apiPath != null">
        api_path = #{record.apiPath,jdbcType=VARCHAR},
      </if>
      <if test="record.apiMethod != null">
        api_method = #{record.apiMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.tags != null">
        tags = #{record.tags,jdbcType=VARCHAR},
      </if>
      <if test="record.enable != null">
        `enable` = #{record.enable,jdbcType=BIT},
      </if>
      <if test="record.expectNum != null">
        expect_num = #{record.expectNum,jdbcType=VARCHAR},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=VARCHAR},
      </if>
      <if test="record.apiDefinitionId != null">
        api_definition_id = #{record.apiDefinitionId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_definition_mock
    set id = #{record.id,jdbcType=VARCHAR},
      api_path = #{record.apiPath,jdbcType=VARCHAR},
      api_method = #{record.apiMethod,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      tags = #{record.tags,jdbcType=VARCHAR},
      `enable` = #{record.enable,jdbcType=BIT},
      expect_num = #{record.expectNum,jdbcType=VARCHAR},
      project_id = #{record.projectId,jdbcType=VARCHAR},
      api_definition_id = #{record.apiDefinitionId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.metersphere.api.domain.ApiDefinitionMock">
    update api_definition_mock
    <set>
      <if test="apiPath != null">
        api_path = #{apiPath,jdbcType=VARCHAR},
      </if>
      <if test="apiMethod != null">
        api_method = #{apiMethod,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="tags != null">
        tags = #{tags,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        `enable` = #{enable,jdbcType=BIT},
      </if>
      <if test="expectNum != null">
        expect_num = #{expectNum,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="apiDefinitionId != null">
        api_definition_id = #{apiDefinitionId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.metersphere.api.domain.ApiDefinitionMock">
    update api_definition_mock
    set api_path = #{apiPath,jdbcType=VARCHAR},
      api_method = #{apiMethod,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      create_user = #{createUser,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=BIT},
      expect_num = #{expectNum,jdbcType=VARCHAR},
      project_id = #{projectId,jdbcType=VARCHAR},
      api_definition_id = #{apiDefinitionId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>
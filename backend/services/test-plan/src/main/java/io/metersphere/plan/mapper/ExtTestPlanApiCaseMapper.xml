<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.plan.mapper.ExtTestPlanApiCaseMapper">

    <resultMap id="ApiDefinitionDTO" type="io.metersphere.api.dto.definition.ApiDefinitionDTO">
        <result column="tags" jdbcType="VARCHAR" property="tags" typeHandler="io.metersphere.handler.ListTypeHandler" />
    </resultMap>

    <update id="updatePos">
        UPDATE
            test_plan_api_case
        SET pos =#{pos}
        WHERE id = #{id}
    </update>
    <select id="selectIdByTestPlanIdOrderByPos" resultType="java.lang.String">
        SELECT id
        FROM test_plan_api_case
        WHERE test_plan_id = #{testPlanId}
        ORDER BY pos ASC
    </select>
    <select id="getMaxPosByTestPlanId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM test_plan_api_case
        WHERE test_plan_id = #{0}
    </select>

    <select id="getIdByParam"
            parameterType="io.metersphere.plan.dto.ResourceSelectParam"
            resultType="java.lang.String">
        SELECT id
        FROM api_test_case
        WHERE deleted = false
        <if test="selectIds != null and selectIds.size() != 0">
            AND id IN
            <foreach collection="selectIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="moduleIds != null and moduleIds.size() != 0">
            AND module_id IN
            <foreach collection="moduleIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="repeatCase == false">
            AND id NOT IN
            (SELECT api_case_id FROM test_plan_api_case WHERE test_plan_id = #{testPlanId})
        </if>
        <if test="orderString != null ">
            ORDER BY #{orderString}
        </if>
    </select>

    <select id="selectDragInfoById" resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM test_plan_api_case
        WHERE id = #{0}
    </select>
    <select id="selectNodeByPosOperator"
            parameterType="io.metersphere.project.dto.NodeSortQueryParam"
            resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM test_plan_api_case
        WHERE test_plan_id = #{parentId}
        <if test="operator == 'moreThan'">
            AND pos &gt; #{pos}
        </if>
        <if test="operator == 'lessThan'">
            AND pos &lt; #{pos}
        </if>
        ORDER BY pos
        <if test="operator == 'lessThan' or operator == 'latest'">
            DESC
        </if>
        LIMIT 1
    </select>
    <select id="selectCaseExecResultCount" resultType="io.metersphere.plan.dto.TestPlanCaseRunResultCount">
        select test_plan_api_case.last_exec_result as result, count(test_plan_api_case.id) as resultCount
        from test_plan_api_case
                 inner join api_test_case on test_plan_api_case.api_case_id = api_test_case.id
        where test_plan_id = #{0}
          and api_test_case.deleted = false
        group by last_exec_result
    </select>

    <select id="list" resultMap="ApiDefinitionDTO">
        select
        api_definition.id, api_definition.`name`, api_definition.protocol, api_definition.`method`,
        api_definition.`path`, api_definition.`status`, api_definition.num, api_definition.tags, api_definition.pos,
        api_definition.project_id, api_definition.module_id, api_definition.latest, api_definition.version_id,
        api_definition.ref_id, api_definition.description, api_definition.create_time, api_definition.create_user,
        api_definition.update_time, api_definition.update_user, api_definition.delete_user, api_definition.delete_time,
        api_definition.deleted, project_version.name as version_name
        from api_definition
        LEFT JOIN project_version ON project_version.id = api_definition.version_id
        where api_definition.deleted = false
        <include refid="queryWhereCondition"/>
        and exists (
        select id
        from api_test_case c
        where c.api_definition_id = api_definition.id and c.deleted = false
        <if test="!isRepeat">
            and not exists (
            select id
            from test_plan_api_case t
            where t.api_case_id = c.id
            and t.test_plan_id = #{request.testPlanId}
            )
        </if>
        )
    </select>


    <sql id="queryWhereCondition">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and api_definition.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.keyword != null and request.keyword != ''">
            and (
            api_definition.name like concat('%', #{request.keyword},'%')
            or api_definition.num like concat('%', #{request.keyword},'%')
            or api_definition.path like concat('%', #{request.keyword},'%')
            )
        </if>
        <if test="request.projectId != null and request.projectId != ''">
            and api_definition.project_id = #{request.projectId}
        </if>
        <if test="request.protocols != null and request.protocols.size() > 0">
            AND api_definition.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <choose>
            <when test='request.searchMode == "AND"'>
                AND <include refid="queryCombine"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryCombine"/>
                )
            </when>
        </choose>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="api_definition"/>
        </include>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='status'">
                            and api_definition.status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='method'">
                            and api_definition.method in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='createUser'">
                            and api_definition.create_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='versionId'">
                            and api_definition.version_id in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='deleteUser'">
                            and api_definition.delete_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key.startsWith('custom_single')">
                            and api_definition.id in (
                            select api_id from api_definition_custom_field where concat('custom_single_', field_id) = #{key}
                            and trim(both '"' from `value`) in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <when test="key.startsWith('custom_multiple')">
                            and api_definition.id in (
                            select api_id from api_definition_custom_field where concat('custom_multiple_', field_id) = #{key}
                            and JSON_CONTAINS(`value`, json_array(#{value}))
                            )
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="queryCombine">
        <if test="request.combine != null">
            <include refid="combine">
                <property name="condition" value="request.combine"/>
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        1=1
    </sql>

    <sql id="combine">
        <!-- 名称 -->
        <if test='${condition}.name != null'>
            api_definition.name
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- id -->
        <if test='${condition}.id != null'>
            api_definition.num
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 所属模块 -->
        <if test='${condition}.moduleId != null'>
            api_definition.moduleId
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.moduleId"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建人 -->
        <if test='${condition}.createUser != null'>
            api_definition.create_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建时间 -->
        <if test='${condition}.createTime != null'>
            api_definition.create_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新人 -->
        <if test='${condition}.updateUser != null'>
            api_definition.update_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新时间 -->
        <if test='${condition}.updateTime != null'>
            api_definition.update_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 状态 -->
        <if test="${condition}.status != null">
            api_definition.status
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.status"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 路径 -->
        <if test="${condition}.path != null">
            api_definition.path
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.path"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 方法 -->
        <if test="${condition}.method != null">
            api_definition.method
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.method"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 标签 -->
        <if test='${condition}.tags != null'>
            <include refid="queryTag">
                <property name="searchMode" value="${searchMode}"/>
                <property name="combineTag" value="${condition}.tags"/>
            </include>
        </if>
        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                api_definition.id ${custom.operator} (
                select api_id from api_definition_custom_field where field_id = #{custom.id}
                <choose>
                    <when test="custom.type == 'List'">
                        and JSON_CONTAINS(`value`, json_array(#{custom.value}))
                    </when>
                    <when test="custom.type == 'date' or custom.type == 'datetime'">
                        and `value`
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </when>
                    <otherwise>
                        and trim(both '"' from `value`)
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </otherwise>
                </choose>
                )
                <include refid="queryType">
                    <property name="searchMode" value="${searchMode}"/>
                </include>
            </foreach>
        </if>
    </sql>

    <sql id="queryTag">
        <!-- 不包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "not like"'>
            (
            api_definition.tags is null or api_definition.tags = '[]' or
            <foreach collection="${combineTag}.value" item="tag" separator="and" open="(" close=")">
                !JSON_CONTAINS(api_definition.tags, JSON_ARRAY(#{tag}))
            </foreach>
            )
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "like"'>
            <foreach collection="${combineTag}.value" item="tag" separator="or" open="(" close=")">
                JSON_CONTAINS(api_definition.tags, JSON_ARRAY(#{tag}))
            </foreach>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 空 -->
        <if test='${combineTag}.operator == "is null"'>
            (api_definition.tags is null or api_definition.tags = '[]')
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
    </sql>

    <sql id="queryType">
        <choose>
            <when test='${searchMode} == "AND"'>
                AND
            </when>
            <when test='${searchMode} == "OR"'>
                OR
            </when>
        </choose>
    </sql>

    <sql id="queryVersionCondition">
        <choose>
            <when test="request.versionId != null and request.versionId != ''">
                and ${versionTable}.version_id = #{request.versionId}
            </when>
            <when test="request.refId != null and request.refId != ''">
                and ${versionTable}.ref_id = #{request.refId}
            </when>
            <otherwise>
                and ${versionTable}.latest = 1
            </otherwise>
        </choose>
    </sql>


    <select id="relateApiCaseList" resultType="io.metersphere.plan.dto.response.TestPlanApiCasePageResponse">
        SELECT
            t.id,
            t.test_plan_collection_id,
            atc.num,
            atc.name,
            atc.priority,
            atc.project_id,
            atc.api_definition_id,
            atc.create_user,
            t.create_time,
            t.environment_id,
            a.module_id,
            a.path,
            a.method,
            a.protocol,
            t.last_exec_result,
            t.execute_user,
            t.last_exec_time,
            t.last_exec_report_id
        FROM
            api_test_case atc
                INNER JOIN api_definition a ON atc.api_definition_id = a.id
        inner join test_plan_api_case t on atc.id = t.api_case_id
        WHERE atc.deleted =#{deleted}
        and t.test_plan_id = #{request.testPlanId}
     <include refid="queryApiCaseWhereCondition"/>
    </select>
    <select id="selectByTestPlanIdAndNotDeleted" resultType="io.metersphere.plan.domain.TestPlanApiCase">
        SELECT t.*
        FROM test_plan_api_case t
                 INNER JOIN api_test_case atc ON t.api_case_id = atc.id
        WHERE t.test_plan_id = #{0}
          AND atc.deleted = false
    </select>


    <sql id="queryApiCaseWhereCondition">
        <if test="request.protocols != null and request.protocols.size() > 0">
            and a.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
            </foreach>
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and atc.api_definition_id = #{request.apiDefinitionId}
        </if>
        <if test="request.keyword != null and request.keyword !=''">
            and (
            atc.name like concat('%', #{request.keyword},'%')
            or atc.num like concat('%', #{request.keyword},'%')
            or a.path like concat('%', #{request.keyword},'%')
            or atc.tags like concat('%', #{request.keyword},'%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <if test="request.collectionId != null and request.collectionId != ''">
            and t.test_plan_collection_id = #{request.collectionId}
        </if>
        <include refid="apiCaseFilters">
            <property name="filter" value="request.filter"/>
        </include>
        <include refid="queryApiCaseVersionCondition">
            <property name="versionTable" value="atc"/>
        </include>
    </sql>

    <sql id="apiCaseFilters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key == 'priority'">
                            and atc.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='status'">
                            and atc.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='caseStatus' or key=='case_status'">
                            and atc.case_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='lastReportStatus'">
                            and atc.last_report_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='createUser'">
                            and atc.create_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                        <when test="key=='updateUser'">
                            and atc.update_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                        <when test="key=='deleteUser'">
                            and atc.delete_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>


    <sql id="queryApiCaseVersionCondition">
        <if test="request.versionId != null and request.versionId != ''">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.versionId == null and request.versionId != '' and request.apiDefinitionId == null and request.apiDefinitionId == ''">
            AND a.latest = 1
        </if>
    </sql>

    <select id="countModuleIdByRequest"  resultType="io.metersphere.functional.dto.FunctionalCaseModuleCountDTO">
        SELECT a.module_id AS moduleId, count(atc.id) AS dataCount, atc.project_id AS projectId, project.name AS projectName
        FROM test_plan_api_case t
        INNER JOIN api_test_case atc ON t.api_case_id = atc.id
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        INNER JOIN project ON atc.project_id = project.id
        WHERE t.test_plan_id = #{request.testPlanId}
        AND atc.deleted = #{deleted}
        <include refid="queryApiCaseWhereCondition"/>
        GROUP BY module_id
    </select>

    <select id="selectIdByProjectIdAndTestPlanId" resultType="java.lang.String">
        SELECT adm.id, adm.project_id
        FROM api_definition_module adm
        WHERE adm.id IN (
            SELECT ad.module_id FROM api_definition ad LEFT JOIN api_test_case atc on atc.api_definition_id = ad.id LEFT JOIN test_plan_api_case tpac ON tpac.api_case_id = atc.id WHERE tpac.test_plan_id = #{testPlanId} AND atc.deleted = false and atc.project_id = #{projectId}
            )
    </select>

    <select id="caseCount"
            resultType="java.lang.Long">
        SELECT count(atc.id)
        FROM test_plan_api_case t
        INNER JOIN api_test_case atc ON t.api_case_id = atc.id
        INNER JOIN api_definition a on atc.api_definition_id = a.id
        WHERE t.test_plan_id = #{request.testPlanId}
        AND atc.deleted = #{deleted}
        <include refid="queryApiCaseWhereCondition"/>
    </select>

    <select id="selectRootIdByTestPlanId" resultType="io.metersphere.functional.dto.ProjectOptionDTO">
        SELECT a.module_id as id, atc.project_id as name, p.name as projectName
        FROM api_test_case atc
                 LEFT JOIN test_plan_api_case tpac ON tpac.api_case_id = atc.id
                 LEFT JOIN project p ON atc.project_id = p.id
                 LEFT JOIN api_definition a on atc.api_definition_id = a.id
        WHERE tpac.test_plan_id = #{testPlanId}
          AND atc.deleted = false AND a.module_id = 'root'
        ORDER BY atc.pos
    </select>

    <select id="selectBaseByProjectIdAndTestPlanId" resultType="io.metersphere.plan.dto.ApiCaseModuleDTO">
        SELECT adm.id, adm.project_id, p.name as projectName
        FROM api_definition_module adm
                 LEFT JOIN project p ON adm.project_id = p.id
        WHERE adm.id IN
              (SELECT ad.module_id FROM api_definition ad LEFT JOIN api_test_case atc on atc.api_definition_id = ad.id LEFT JOIN test_plan_api_case tpac ON tpac.api_case_id = atc.id WHERE tpac.test_plan_id = #{testPlanId} AND atc.deleted = false)
        ORDER BY pos
    </select>

    <select id="getIds"  resultType="java.lang.String">
        SELECT
        t.id as id
        FROM
        test_plan_api_case t
        INNER JOIN api_test_case atc ON t.api_case_id = atc.id
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        WHERE
        t.test_plan_id = #{request.testPlanId}
        AND atc.deleted = #{deleted}
        <include refid="queryWhereConditionByBatchQueryRequest"/>
    </select>

    <sql id="queryWhereConditionByBatchQueryRequest">
        <if test="request.protocols != null and request.protocols.size() > 0">
            and a.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
            </foreach>
        </if>
        <if test="request.condition.keyword != null and request.condition.keyword !=''">
            and (
            atc.name like concat('%', #{request.condition.keyword},'%')
            or atc.num like concat('%', #{request.condition.keyword},'%')
            or a.path like concat('%', #{request.condition.keyword},'%')
            or atc.tags like concat('%', #{request.condition.keyword},'%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <if test="request.collectionId != null and request.collectionId != ''">
            and t.test_plan_collection_id = #{request.collectionId}
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
    </sql>

    <update id="batchUpdateExecutor">
        update test_plan_api_case
        set execute_user = #{userId}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="collectionCountByRequest" parameterType="java.lang.String" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT
            test_plan_api_case.test_plan_collection_id AS moduleId,
            count( test_plan_api_case.id ) AS dataCount
        FROM
            api_test_case
                INNER JOIN test_plan_api_case ON api_test_case.id = test_plan_api_case.api_case_id
        WHERE
            api_test_case.deleted = FALSE
          AND test_plan_api_case.test_plan_id = #{testPlanId}
        GROUP BY
            test_plan_api_case.test_plan_collection_id
    </select>

    <select id="getMaxPosByCollectionId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM test_plan_api_case
        WHERE test_plan_collection_id = #{0}
    </select>

    <select id="getPlanApiCaseByIds" resultType="io.metersphere.plan.domain.TestPlanApiCase">
        select tpac.test_plan_id testPlanId, tpac.api_case_id apiCaseId, tpac.last_exec_result lastExecResult
        from test_plan_api_case tpac join api_test_case atc on atc.id = tpac.api_case_id
        <where>
            atc.deleted = false
            <if test="planIds != null and planIds.size() > 0">
                and tpac.test_plan_id in
                <foreach collection="planIds" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getApiCaseExecuteInfoByIds" resultType="io.metersphere.plan.domain.TestPlanApiCase">
        select id, test_plan_id, api_case_id, environment_id
        from test_plan_api_case
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>
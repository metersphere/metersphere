<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.plan.mapper.ExtTestPlanFunctionalCaseMapper">
    <update id="updatePos">
        UPDATE
            test_plan_functional_case
        SET pos =#{pos}
        WHERE id = #{id}
    </update>
    <select id="selectIdByTestPlanIdOrderByPos" resultType="java.lang.String">
        SELECT id
        FROM test_plan_functional_case
        WHERE test_plan_id = #{testPlanId}
        ORDER BY pos ASC
    </select>
    <select id="selectIdByTestPlanIds" resultType="java.lang.String">
        SELECT id
        FROM test_plan_functional_case
        WHERE test_plan_id IN
        <foreach collection="testPlanIds" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="getMaxPosByTestPlanId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM test_plan_functional_case
        WHERE test_plan_id = #{0}
    </select>
    <select id="getIdByParam"
            parameterType="io.metersphere.plan.dto.ResourceSelectParam"
            resultType="java.lang.String">
        SELECT id
        FROM functional_case
        WHERE deleted = false
        <if test="selectIds != null and selectIds.size() != 0">
            AND id IN
            <foreach collection="selectIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="moduleIds != null and moduleIds.size() != 0">
            AND module_id IN
            <foreach collection="moduleIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="repeatCase == false">
            AND id NOT IN
            (SELECT functional_case_id FROM test_plan_functional_case WHERE test_plan_id = #{testPlanId})
        </if>
        <if test="orderString != null ">
            ORDER BY #{orderString}
        </if>
    </select>

    <select id="getIds"  resultType="java.lang.String">
        SELECT
        test_plan_functional_case.id as id
        FROM
        test_plan_functional_case
        LEFT JOIN functional_case ON test_plan_functional_case.functional_case_id = functional_case.id
        WHERE
        test_plan_functional_case.test_plan_id = #{request.testPlanId}
        AND functional_case.deleted = #{deleted}
        <include refid="queryWhereConditionByBatchQueryRequest"/>
    </select>

    <select id="selectDragInfoById" resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM test_plan_functional_case
        WHERE id = #{0}
    </select>
    <select id="selectNodeByPosOperator"
            parameterType="io.metersphere.project.dto.NodeSortQueryParam"
            resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM test_plan_functional_case
        WHERE test_plan_collection_id = #{parentId}
        <if test="operator == 'moreThan'">
            AND pos &gt; #{pos}
        </if>
        <if test="operator == 'lessThan'">
            AND pos &lt; #{pos}
        </if>
        ORDER BY pos
        <if test="operator == 'lessThan' or operator == 'latest'">
            DESC
        </if>
        LIMIT 1
    </select>

    <select id="getCasePage" resultType="io.metersphere.plan.dto.response.TestPlanCasePageResponse">
        SELECT
            functional_case.id as caseId,
            functional_case.num,
            functional_case.NAME,
            functional_case.module_id as moduleId,
            functional_case.version_id as versionId,
            project_version.name as versionName,
            functional_case.case_edit_type as caseEditType,
            functional_case.create_user as createUser,
            functional_case.create_time as createTime,
            functional_case.update_user as updateUser,
            functional_case.update_time as updateTime,
            functional_case.review_status as reviewStatus,
            functional_case.last_execute_result as lastExecuteResult,
            functional_case.tags,
            test_plan_functional_case.execute_user as executeUser,
            test_plan_functional_case.last_exec_time as lastExecTime,
            test_plan_functional_case.last_exec_result as lastExecResult,
            test_plan_functional_case.test_plan_id as testPlanId,
            test_plan_functional_case.id,
            project.name as projectName,
            project.id as projectId,
            test_plan_functional_case.test_plan_collection_id as testPlanCollectionId,
            test_plan_collection.name as testPlanCollectionName
        FROM
            functional_case
        inner join project on functional_case.project_id = project.id
        inner join test_plan_functional_case on functional_case.id = test_plan_functional_case.functional_case_id
        inner JOIN project_version ON  functional_case.version_id = project_version.id
        inner join test_plan_collection on test_plan_collection.id = test_plan_functional_case.test_plan_collection_id
        where functional_case.deleted = #{deleted}
        and test_plan_functional_case.test_plan_id = #{request.testPlanId}
        <include refid="queryWhereCondition"/>
        order by
        <if test="sort != null and sort != ''">
            functional_case.${sort}
        </if>
        <if test="sort == null or sort == ''">
            test_plan_functional_case.pos desc
        </if>
    </select>

    <sql id="queryWhereCondition">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and functional_case.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                <choose>
                    <when test="nodeId.contains('_root')">
                        'root'
                    </when>
                    <otherwise>
                        #{nodeId}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="request.keyword != null and request.keyword != ''">
            and (
            functional_case.name like concat('%', #{request.keyword},'%')
            or functional_case.num like concat('%', #{request.keyword},'%')
            )
        </if>
        <if test="request.collectionId != null and request.collectionId != ''">
            and test_plan_functional_case.test_plan_collection_id = #{request.collectionId}
        </if>
        <if test="request.projectId != null and request.projectId!=''">
            and functional_case.project_id = #{request.projectId}
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <choose>
            <when test='request.searchMode == "AND"'>
                AND <include refid="queryCombine"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryCombine"/>
                )
            </when>
        </choose>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="functional_case"/>
        </include>
    </sql>

    <sql id="queryWhereConditionByBatchQueryRequest">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and functional_case.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.condition.keyword != null">
            and (
            functional_case.name like concat('%', #{request.condition.keyword},'%')
            or functional_case.num like concat('%', #{request.condition.keyword},'%')
            or functional_case.tags like concat('%', #{request.condition.keyword},'%')
            )
        </if>
        <if test="request.collectionId != null and request.collectionId != ''">
            and test_plan_functional_case.test_plan_collection_id = #{request.collectionId}
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
        <choose>
            <when test='request.condition.searchMode == "AND"'>
                AND <include refid="batchQueryCombine"/>
            </when>
            <when test='request.condition.searchMode == "OR"'>
                and (
                <include refid="batchQueryCombine"/>
                )
            </when>
        </choose>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <!-- 评审状态 -->
                        <when test="key=='reviewStatus'">
                            and functional_case.review_status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <!-- 执行结果 -->
                        <when test="key=='lastExecResult'">
                            and test_plan_functional_case.last_exec_result in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <!-- 版本 -->
                        <when test="key=='version_id'">
                            and functional_case.version_id in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <!-- 自定义单选 -->
                        <when test="key.startsWith('custom_single')">
                            and functional_case.id in (
                            select field_id from functional_case_custom_field where concat('custom_single-',field_id) =
                            #{key}
                            and trim(both '"' from `value`) in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <!-- 自定义多选 -->
                        <when test="key.startsWith('custom_multiple')">
                            and functional_case.id in (
                            select field_id from functional_case_custom_field where concat('custom_multiple-',field_id) =
                            #{key}
                            and JSON_CONTAINS(`value`, json_array(#{value}))
                        </when>
                        <!-- 用例等级 -->
                        <when test="key=='caseLevel'">
                            and functional_case.id in (
                            select case_id from functional_case_custom_field where `value` in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <!-- 更新人 -->
                        <when test="key=='updateUserName'">
                            and functional_case.update_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <!-- 创建人 -->
                        <when test="key=='createUserName'">
                            and functional_case.create_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <!-- 删除人 -->
                        <when test="key=='deleteUserName'">
                            and functional_case.delete_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="batchQueryCombine">
        <if test="request.condition.combine != null">
            <include refid="combine">
                <property name="condition" value="request.condition.combine"/>
                <property name="searchMode" value="request.condition.searchMode"/>
            </include>
        </if>
        1=1
    </sql>

    <sql id="queryCombine">
        <if test="request.combine != null">
            <include refid="combine">
                <property name="condition" value="request.combine"/>
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        1=1
    </sql>

    <sql id="combine">
        <!-- 名称 -->
        <if test='${condition}.name != null'>
            functional_case.name
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- id -->
        <if test='${condition}.id != null'>
            functional_case.num
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 所属模块 -->
        <if test='${condition}.moduleId != null'>
            functional_case.moduleId
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.moduleId"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建人 -->
        <if test='${condition}.createUser != null'>
            functional_case.create_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建时间 -->
        <if test='${condition}.createTime != null'>
            functional_case.create_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新人 -->
        <if test='${condition}.updateUser != null'>
            functional_case.update_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新时间 -->
        <if test='${condition}.updateTime != null'>
            functional_case.update_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 标签 -->
        <if test='${condition}.tags != null'>
            <include refid="queryTag">
                <property name="searchMode" value="${searchMode}"/>
                <property name="combineTag" value="${condition}.tags"/>
            </include>
        </if>
        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                functional_case.id ${custom.operator} (
                select case_id from functional_case_custom_field where field_id = #{custom.id}
                <choose>
                    <when test="custom.type == 'List'">
                        and JSON_CONTAINS(`value`, json_array(#{custom.value}))
                    </when>
                    <when test="custom.type == 'date' or custom.type == 'datetime'">
                        and `value`
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </when>
                    <otherwise>
                        and trim(both '"' from `value`)
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </otherwise>
                </choose>
                )
                <include refid="queryType">
                    <property name="searchMode" value="${searchMode}"/>
                </include>
            </foreach>
        </if>
    </sql>

    <sql id="queryVersionCondition">
        <choose>
            <when test="request.versionId != null and request.versionId != ''">
                and ${versionTable}.version_id = #{request.versionId}
            </when>
            <when test="request.refId != null and request.refId != ''">
                and ${versionTable}.ref_id = #{request.refId}
            </when>
            <otherwise>
                and ${versionTable}.latest = 1
            </otherwise>
        </choose>
    </sql>

    <sql id="queryType">
        <choose>
            <when test='${searchMode} == "AND"'>
                AND
            </when>
            <when test='${searchMode} == "OR"'>
                OR
            </when>
        </choose>
    </sql>

    <sql id="queryTag">
        <!-- 不包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "not like"'>
            (
            functional_case.tags is null or functional_case.tags = '[]' or
            <foreach collection="${combineTag}.value" item="tag" separator="and" open="(" close=")">
                !JSON_CONTAINS(functional_case.tags, JSON_ARRAY(#{tag}))
            </foreach>
            )
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "like"'>
            <foreach collection="${combineTag}.value" item="tag" separator="or" open="(" close=")">
                JSON_CONTAINS(functional_case.tags, JSON_ARRAY(#{tag}))
            </foreach>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 空 -->
        <if test='${combineTag}.operator == "is null"'>
            (functional_case.tags is null or functional_case.tags = '[]')
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
    </sql>

    <select id="selectRootIdByTestPlanId" resultType="io.metersphere.functional.dto.ProjectOptionDTO">
        SELECT fc.module_id as id, fc.project_id as name, p.name as projectName
        FROM functional_case fc
                 LEFT JOIN test_plan_functional_case tpfc ON tpfc.functional_case_id = fc.id
                 LEFT JOIN project p ON fc.project_id = p.id
        WHERE tpfc.test_plan_id = #{testPlanId}
          AND fc.deleted = false
        ORDER BY fc.pos
    </select>

    <select id="selectBaseByProjectIdAndTestPlanId" resultType="io.metersphere.functional.dto.FunctionalCaseModuleDTO">
        SELECT fcm.id, fcm.project_id, p.name as projectName
        FROM functional_case_module fcm
                 LEFT JOIN project p ON fcm.project_id = p.id
        WHERE fcm.id IN
              (SELECT fc.module_id FROM functional_case fc LEFT JOIN test_plan_functional_case tpfc ON tpfc.functional_case_id = fc.id WHERE tpfc.test_plan_id = #{testPlanId} AND fc.deleted = false)
        ORDER BY pos
    </select>

    <select id="countModuleIdByRequest"  resultType="io.metersphere.functional.dto.FunctionalCaseModuleCountDTO">
        SELECT CASE WHEN functional_case.module_id = 'root' THEN concat(functional_case.project_id, '_', functional_case.module_id) ElSE functional_case.module_id END AS moduleId,
               count(functional_case.id) As dataCount, functional_case.project_id As projectId, project.name As projectName
        FROM test_plan_functional_case
        LEFT JOIN functional_case ON test_plan_functional_case.functional_case_id = functional_case.id
        LEFT JOIN project ON functional_case.project_id = project.id
        WHERE test_plan_functional_case.test_plan_id = #{request.testPlanId}
        AND functional_case.deleted = #{deleted}
        <include refid="queryWhereCondition"/>
        GROUP BY moduleId
    </select>

    <select id="caseCount"
            resultType="java.lang.Long">
        SELECT count(functional_case.id)
        FROM test_plan_functional_case LEFT JOIN functional_case ON test_plan_functional_case.functional_case_id = functional_case.id
        WHERE test_plan_functional_case.test_plan_id = #{request.testPlanId}
        AND functional_case.deleted = #{deleted}
        <include refid="queryWhereCondition"/>
    </select>

    <select id="getPlanFunctionalCaseByIds" resultType="io.metersphere.plan.domain.TestPlanFunctionalCase">
        select tpfc.test_plan_id testPlanId, tpfc.functional_case_id functionalCaseId, tpfc.last_exec_result lastExecResult
        from test_plan_functional_case tpfc join functional_case fc on fc.id = tpfc.functional_case_id
        <where>
            fc.deleted = false
            <if test="planIds != null and planIds.size() > 0">
                and tpfc.test_plan_id IN
                <foreach collection="planIds" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <select id="selectCaseExecResultCount" resultType="io.metersphere.plan.dto.TestPlanCaseRunResultCount">
        select test_plan_functional_case.last_exec_result as result, count(test_plan_functional_case.id) as resultCount
        from test_plan_functional_case
                 INNER JOIN functional_case ON test_plan_functional_case.functional_case_id = functional_case.id
        where test_plan_id = #{0}
          AND functional_case.deleted = false
        group by last_exec_result
    </select>
    <select id="selectByTestPlanIdAndNotDeleted"
            resultType="io.metersphere.plan.domain.TestPlanFunctionalCase">
        SELECT t.*
        from test_plan_functional_case t
                 INNER JOIN functional_case f ON t.functional_case_id = f.id
        WHERE test_plan_id = #{0}
          AND f.deleted = false
    </select>


    <update id="batchUpdate">
        update test_plan_functional_case
        set last_exec_result = #{lastExecResult},
            last_exec_time = #{lastExecTime},
            execute_user = #{userId}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="batchUpdateExecutor">
        update test_plan_functional_case
        set execute_user = #{userId}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="getMaxPosByCollectionId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM test_plan_functional_case
        WHERE test_plan_collection_id = #{0}
    </select>

    <select id="collectionCountByRequest" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT
            test_plan_functional_case.test_plan_collection_id AS moduleId,
            count( test_plan_functional_case.id ) AS dataCount
        FROM
            functional_case
                INNER JOIN test_plan_functional_case ON functional_case.id = test_plan_functional_case.functional_case_id
        WHERE
            functional_case.deleted = FALSE
          AND test_plan_functional_case.test_plan_id = #{request.testPlanId}
        <include refid="queryWhereCondition"/>
        GROUP BY
            test_plan_functional_case.test_plan_collection_id
    </select>
</mapper>
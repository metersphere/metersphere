<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.api.mapper.ExtApiDefinitionModuleMapper">
    <select id="selectIdAndParentIdByRequest" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId
        FROM api_definition_module m
        <include refid="module_request"/>
        ORDER BY pos
    </select>
    <select id="selectChildrenIdsByParentIds" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <delete id="deleteByIds">
        DELETE
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="getMaxPosByParentId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM api_definition_module
        WHERE parent_id = #{0}
    </select>
    <select id="selectChildrenIdsSortByPos" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id = #{0}

        ORDER BY pos ASC
    </select>
    <select id="selectApiDataByRequest" resultType="io.metersphere.api.dto.debug.ApiTreeNode">
        SELECT id,
        NAME,
        module_id AS parentId,
        'API' AS type,
        method,
        protocol
        FROM api_definition
        where api_definition.deleted = #{deleted}
        <include refid="io.metersphere.api.mapper.ExtApiDefinitionMapper.queryWhereCondition"/>
        ORDER BY pos DESC
    </select>
    <select id="countModuleIdByRequest" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT module_id AS moduleId, count(id) AS dataCount
        FROM api_definition
        where api_definition.deleted = #{deleted}
        <include refid="io.metersphere.api.mapper.ExtApiDefinitionMapper.queryWhereCondition"/>
        <if test="request.testPlanId != null and request.testPlanId != ''">
            and exists (
            select id
            from api_test_case c
            where c.api_definition_id = api_definition.id and c.deleted = false
            <if test="!isRepeat">
                and not exists (
                select id
                from test_plan_api_case t
                where t.api_case_id = c.id
                and t.test_plan_id = #{request.testPlanId}
                )
            </if>
            )
        </if>
        GROUP BY api_definition.module_id
    </select>
    <select id="selectBaseModuleById" resultType="io.metersphere.system.dto.sdk.BaseModule">
        SELECT id, name, pos, project_Id, parent_id
        FROM api_definition_module
        WHERE id = #{0}
    </select>

    <select id="selectModuleByParentIdAndPosOperator"
            parameterType="io.metersphere.project.dto.NodeSortQueryParam"
            resultType="io.metersphere.system.dto.sdk.BaseModule">
        SELECT id, name, pos, project_Id, parent_id
        FROM api_definition_module
        WHERE parent_id = #{parentId}
        <if test="operator == 'moreThan'">
            AND pos &gt; #{pos}
        </if>
        <if test="operator == 'lessThan'">
            AND pos &lt; #{pos}
        </if>
        ORDER BY pos
        <if test="operator == 'lessThan' or operator == 'latest'">
            DESC
        </if>
        LIMIT 1
    </select>
    <select id="selectBaseByRequest" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId,
        m.name,
        m.pos,
        m.project_id,
        'MODULE' AS type
        FROM api_definition_module m
        <include refid="module_request"/>
        ORDER BY pos
    </select>
    <select id="selectNodeByIds" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId,
        m.name,
        m.pos,
        m.project_id,
        'MODULE' AS type
        FROM api_definition_module m
        WHERE m.id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY pos
    </select>


    <select id="selectBaseByIds" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT id, name, parent_id AS parentId, 'MODULE' AS type
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY pos
    </select>
    <select id="getModuleIdsByParentIds" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id IN
        <foreach collection="parentIds" item="parentId" open="(" separator="," close=")">
            #{parentId}
        </foreach>
    </select>
    <select id="getNameInfoByIds" resultType="io.metersphere.api.domain.ApiDefinitionModule">
        SELECT id, name
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <sql id="api_request">
        <where>
            <if test="request.projectId != null and request.projectId != ''">
                AND m.project_id = #{request.projectId}
            </if>
            <if test="request.keyword != null and request.keyword != ''">
                AND m.name like CONCAT('%', #{request.keyword},'%')
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() != 0">
                AND m.id IN
                <foreach collection="request.moduleIds" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>

        </where>
    </sql>

    <sql id="filters">
        <include refid="io.metersphere.api.mapper.ExtApiDefinitionMapper.filters"/>
    </sql>

    <sql id="combine">
        <include refid="io.metersphere.api.mapper.ExtApiDefinitionMapper.combine"/>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null and request.versionId != ''">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.refId != null and request.refId != ''">
            and ${versionTable}.ref_id = #{request.refId}
        </if>
        <if test="request.versionId == null and request.refId == null">
            AND ${versionTable}.latest = 1
        </if>
    </sql>

    <sql id="module_request">
        <where>
            <if test="request.projectId != null and request.projectId != ''">
                AND m.project_id = #{request.projectId}
            </if>
            <if test="request.keyword != null and request.keyword != ''">
                AND m.name like CONCAT('%', #{request.keyword},'%')
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() != 0">
                AND m.id IN
                <foreach collection="request.moduleIds" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>

        </where>
    </sql>


    <select id="apiCaseCountModuleIdByRequest" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT
        module_id AS moduleId,
        count( api_test_case.id ) AS dataCount
        FROM
        api_definition
        INNER JOIN api_test_case ON api_definition.id = api_test_case.api_definition_id
        WHERE
        api_test_case.deleted = #{deleted}
        <include refid="io.metersphere.api.mapper.ExtApiDefinitionMapper.queryWhereCondition"/>
        <if test="request.testPlanId != null and request.testPlanId != ''">
            and exists (
            select id
            from api_test_case c
            where c.api_definition_id = api_definition.id and c.deleted = false
            <if test="!isRepeat">
                and not exists (
                select id
                from test_plan_api_case t
                where t.api_case_id = c.id
                and t.test_plan_id = #{request.testPlanId}
                )
            </if>
            )
        </if>
        GROUP BY api_definition.module_id
    </select>
</mapper>
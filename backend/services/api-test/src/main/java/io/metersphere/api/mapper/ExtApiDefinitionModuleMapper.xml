<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.api.mapper.ExtApiDefinitionModuleMapper">
    <select id="selectIdAndParentIdByRequest" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId
        FROM api_definition_module m
        <include refid="module_request"/>
        ORDER BY pos
    </select>
    <select id="selectChildrenIdsByParentIds" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <delete id="deleteByIds">
        DELETE
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="getMaxPosByParentId" resultType="java.lang.Long">
        SELECT max(pos)
        FROM api_definition_module
        WHERE parent_id = #{0}
    </select>
    <select id="selectChildrenIdsSortByPos" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id = #{0}

        ORDER BY pos ASC
    </select>
    <select id="selectApiDataByRequest" resultType="io.metersphere.api.dto.debug.ApiTreeNode">
        SELECT id,
        NAME,
        module_id AS parentId,
        'API' AS type,
        method,
        protocol
        FROM api_definition
        where api_definition.deleted = #{deleted}
        <include refid="queryWhereCondition"/>
        ORDER BY pos DESC
    </select>
    <select id="countModuleIdByRequest" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT module_id AS moduleId, count(id) AS dataCount
        FROM api_definition
        where api_definition.deleted = #{deleted}
        <include refid="queryWhereCondition"/>
        <if test="request.testPlanId != null and request.testPlanId != ''">
            and exists (
            select id
            from api_test_case c
            where c.api_definition_id = api_definition.id and c.deleted = false
            <if test="!isRepeat">
                and not exists (
                select id
                from test_plan_api_case t
                where t.api_case_id = c.id
                and t.test_plan_id = #{request.testPlanId}
                )
            </if>
            )
        </if>
        GROUP BY api_definition.module_id
    </select>
    <select id="selectBaseModuleById" resultType="io.metersphere.system.dto.sdk.BaseModule">
        SELECT id, name, pos, project_Id, parent_id
        FROM api_definition_module
        WHERE id = #{0}
    </select>

    <select id="selectModuleByParentIdAndPosOperator"
            parameterType="io.metersphere.project.dto.NodeSortQueryParam"
            resultType="io.metersphere.system.dto.sdk.BaseModule">
        SELECT id, name, pos, project_Id, parent_id
        FROM api_definition_module
        WHERE parent_id = #{parentId}
        <if test="operator == 'moreThan'">
            AND pos &gt; #{pos}
        </if>
        <if test="operator == 'lessThan'">
            AND pos &lt; #{pos}
        </if>
        ORDER BY pos
        <if test="operator == 'lessThan' or operator == 'latest'">
            DESC
        </if>
        LIMIT 1
    </select>
    <select id="selectBaseByRequest" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId,
        m.name,
        m.pos,
        m.project_id,
        'MODULE' AS type
        FROM api_definition_module m
        <include refid="module_request"/>
        ORDER BY pos
    </select>
    <select id="selectNodeByIds" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT m.id,
        m.parent_id AS parentId,
        m.name,
        m.pos,
        m.project_id,
        'MODULE' AS type
        FROM api_definition_module m
        WHERE m.id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY pos
    </select>


    <select id="selectBaseByIds" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT id, name, parent_id AS parentId, 'MODULE' AS type
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY pos
    </select>
    <select id="getModuleIdsByParentIds" resultType="java.lang.String">
        SELECT id
        FROM api_definition_module
        WHERE parent_id IN
        <foreach collection="parentIds" item="parentId" open="(" separator="," close=")">
            #{parentId}
        </foreach>
    </select>
    <select id="getNameInfoByIds" resultType="io.metersphere.api.domain.ApiDefinitionModule">
        SELECT id, name
        FROM api_definition_module
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <sql id="api_request">
        <where>
            <if test="request.projectId != null and request.projectId != ''">
                AND m.project_id = #{request.projectId}
            </if>
            <if test="request.keyword != null and request.keyword != ''">
                AND m.name like CONCAT('%', #{request.keyword},'%')
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() != 0">
                AND m.id IN
                <foreach collection="request.moduleIds" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>

        </where>
    </sql>

    <sql id="queryWhereCondition">
        <if test="request.keyword != null and request.keyword != ''">
            and (
            api_definition.num like concat('%', #{request.keyword},'%')
            or api_definition.name like concat('%', #{request.keyword},'%')
            or api_definition.tags like concat('%', #{request.keyword},'%')
            )
        </if>
        <if test="request.projectId != null and request.projectId != ''">
            and api_definition.project_id = #{request.projectId}
        </if>
        <if test="request.protocol != null and request.protocol != ''">
            AND api_definition.protocol = #{request.protocol}
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and api_definition.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>

        <if test="request.combine != null and request.combine != ''">
            <include refid="combine">
                <property name="condition" value="request.combine"/>
                <property name="name" value="request.name"/>
                <property name="ObjectTags" value="request.combine.tags"/>
            </include>
        </if>

        <include refid="queryVersionCondition">
            <property name="versionTable" value="api_definition"/>
        </include>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null and request.versionId != ''">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.refId != null and request.refId != ''">
            and ${versionTable}.ref_id = #{request.refId}
        </if>
        <if test="request.versionId == null and request.refId == null">
            AND ${versionTable}.latest = 1
        </if>
    </sql>
    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and api_definition.name
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>

        <if test='${condition}.id != null'>
            and api_definition.num
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
        </if>

        <if test="${condition}.updateTime != null">
            and api_definition.update_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>

        <if test="${condition}.createTime != null">
            and api_definition.create_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>

        <if test="${condition}.status != null">
            and api_definition.status
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>

        <if test="${condition}.path != null">
            and api_definition.path
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.path"/>
            </include>
        </if>

        <if test="${condition}.method != null">
            and api_definition.method
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>

        <if test='${condition}.tags != null and ${ObjectTags}.operator == "not like"'>
            and (api_definition.tags is null or api_definition.tags
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.tags"/>
            </include>
            )
        </if>

        <if test='${condition}.tags != null and ${ObjectTags}.operator == "like"'>
            and api_definition.tags
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.tags"/>
            </include>
        </if>

        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                <if test="custom.value != ''">
                    <if test='custom.operator == "not like" or custom.operator == "not in"'>
                        and api_definition.id not in (
                    </if>
                    <if test='custom.operator != "not like" and custom.operator != "not in"'>
                        and api_definition.id in (
                    </if>
                    select api_id from api_definition_custom_field where field_id = #{custom.id}
                    <choose>
                        <when test="custom.type == 'TEXTAREA' or custom.operator == 'current user'">
                            and `value`
                            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <when test="custom.type == 'MULTIPLE_MEMBER' or custom.type == 'CHECKBOX' or custom.type == 'MULTIPLE_SELECT'">
                            and ${custom.value}
                        </when>
                        <when test="custom.type == 'DATE' or custom.type == 'DATETIME'">
                            and left(replace(unix_timestamp(trim(both '"' from `value`)), '.', ''), 13)
                            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <otherwise>
                            and trim(both '"' from `value`)
                            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </otherwise>
                    </choose>
                    )
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='status'">
                            and api_definition.status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='method'">
                            and api_definition.method in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='create_user'">
                            and api_definition.create_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='version_id'">
                            and api_definition.version_id in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key.startsWith('custom_single')">
                            and api_definition.id in (
                            select api_id from api_definition_custom_field where concat('custom_single_', field_id) = #{key}
                            and trim(both '"' from `value`) in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <when test="key.startsWith('custom_multiple')">
                            and api_definition.id in (
                            select api_id from api_definition_custom_field where concat('custom_multiple_', field_id) = #{key}
                            and
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterMultipleWrapper"/>
                            )
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>
    <sql id="module_request">
        <where>
            <if test="request.projectId != null and request.projectId != ''">
                AND m.project_id = #{request.projectId}
            </if>
            <if test="request.keyword != null and request.keyword != ''">
                AND m.name like CONCAT('%', #{request.keyword},'%')
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() != 0">
                AND m.id IN
                <foreach collection="request.moduleIds" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>

        </where>
    </sql>
</mapper>
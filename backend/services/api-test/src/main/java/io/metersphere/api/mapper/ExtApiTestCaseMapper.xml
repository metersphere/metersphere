<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.metersphere.api.mapper.ExtApiTestCaseMapper">
    <update id="batchMoveGc">
        UPDATE api_test_case
        SET deleted = 1,
        delete_time = #{deleteTime},
        delete_user = #{userId}
        WHERE id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="getPos" resultType="java.lang.Long">
        SELECT pos
        FROM api_test_case
        WHERE project_id = #{projectId}
        ORDER BY pos DESC
        LIMIT 1;

    </select>
    <select id="listByRequest" resultType="io.metersphere.api.dto.definition.ApiTestCaseDTO">
        SELECT
        t1.id,
        t1.project_id,
        t1.name,
        t1.status,
        t1.api_definition_id,
        t1.priority,
        t1.create_user,
        t1.update_user,
        t1.create_time,
        t1.update_time,
        t1.delete_user,
        t1.delete_time,
        t1.num,
        t1.last_report_status,
        t1.last_report_id,
        t1.environment_id,
        a.module_id
        FROM
        api_test_case t1
        LEFT JOIN api_report t3 ON t1.last_report_id = t3.id
        INNER JOIN api_definition a ON t1.api_definition_id = a.id
        WHERE t1.deleted =#{deleted}
        <include refid="queryWhereCondition"/>
    </select>
    <select id="getIds" resultType="java.lang.String">
        SELECT
        t1.id
        FROM
        api_test_case t1
        LEFT JOIN api_report t3 ON t1.last_report_id = t3.id
        INNER JOIN api_definition a ON t1.api_definition_id = a.id
        WHERE t1.deleted =#{deleted}
        <include refid="queryWhereConditionByBatch"/>
    </select>
    <select id="getCaseInfoByApiIds" resultType="io.metersphere.api.domain.ApiTestCase">
        SELECT id,
        name,
        api_definition_id,
        project_id
        FROM api_test_case
        WHERE deleted = #{deleted} and api_definition_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getCaseInfoByIds" resultType="io.metersphere.api.domain.ApiTestCase">
        SELECT id,
        name
        FROM api_test_case
        WHERE deleted = #{deleted} and id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getPrePos" resultType="java.lang.Long">
        select `pos` from api_test_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &lt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>


    <select id="getLastPos" resultType="java.lang.Long">
        select `pos` from api_test_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &gt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>

    <select id="findPassRateByIds" resultType="io.metersphere.api.dto.definition.CasePassDTO">
        SELECT
        t2.resource_id as id,
        CONCAT(
        FORMAT(
        SUM(
        IF
        ( t2.`status` = 'success', 1, 0 ))/ COUNT( t2.id )* 100,
        2
        ),
        '%'
        ) value
        FROM
        api_report t2
        WHERE
        t2.resource_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        GROUP BY
        t2.resource_id
    </select>
    <select id="selectIdsByCaseIds" resultType="java.lang.String">
        SELECT
        t1.api_definition_id
        FROM
        api_test_case t1
        WHERE
        t1.deleted = 1
        AND t1.id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="getCaseIds" resultType="java.lang.String">
        SELECT
        t1.id
        FROM
        api_test_case t1
        WHERE
        t1.deleted = #{deleted}
        AND t1.api_definition_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="getIdsByApiIds" resultType="java.lang.String">
        SELECT
        t1.id
        FROM
        api_test_case t1
        WHERE
         t1.api_definition_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="listByProviderRequest" resultType="io.metersphere.dto.ApiTestCaseProviderDTO">
        SELECT
        t1.id,
        t1.project_id,
        t1.name,
        t1.priority,
        t1.tags,
        v.name as versionName
        FROM
        api_test_case t1
        LEFT JOIN project_version v ON t1.version_id = v.id
        INNER JOIN api_definition a ON t1.api_definition_id = a.id
        WHERE t1.deleted =#{deleted}
        and t1.id not in
        (
        select associate.${apiCaseColumnName} from ${table} associate  where  associate.${sourceName} = #{request.sourceId}
        )
        <include refid="queryWhereCondition"/>
    </select>

    <sql id="queryWhereConditionByBatch">
        <if test="request.protocol != null and request.protocol!=''">
            and a.protocol = #{request.protocol}
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and t1.api_definition_id = #{request.apiDefinitionId}
        </if>
        <if test="request.projectId != null and request.projectId!=''">
            and t1.project_id = #{request.projectId}
        </if>
        <if test="request.condition.keyword != null">
            and (
            t1.name like concat('%', #{request.condition.keyword},'%')
            or t1.num like concat('%', #{request.condition.keyword},'%')
            or t1.tags like JSON_CONTAINS(t1.tags, concat('["',#{request.condition.keyword},'"]'))
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="t1"/>
        </include>
    </sql>

    <sql id="queryWhereCondition">
        <if test="request.protocol != null and request.protocol!=''">
            and a.protocol = #{request.protocol}
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and t1.api_definition_id = #{request.apiDefinitionId}
        </if>
        <if test="request.projectId != null and request.projectId!=''">
            and t1.project_id = #{request.projectId}
        </if>
        <if test="request.keyword != null">
            and (
            t1.name like concat('%', #{request.keyword},'%')
            or t1.num like concat('%', #{request.keyword},'%')
            or t1.tags like JSON_CONTAINS(t1.tags, concat('["',#{request.keyword},'"]'))
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="t1"/>
        </include>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key == 'priority'">
                            and t1.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='status'">
                            and t1.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='caseStatus' or key=='case_status'">
                            and t1.case_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='last_execute_result'">
                            and t1.last_execute_result in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='create_user' or key=='createUser'">
                            and t1.create_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                        <when test="key=='update_user' or key=='updateUser'">
                            and t1.update_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.versionId == null and request.apiDefinitionId == null">
            AND a.latest = 1
        </if>
    </sql>
</mapper>
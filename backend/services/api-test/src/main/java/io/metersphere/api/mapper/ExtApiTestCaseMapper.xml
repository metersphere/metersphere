<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.metersphere.api.mapper.ExtApiTestCaseMapper">
    <resultMap id="ApiTestCaseDTO" type="io.metersphere.api.dto.definition.ApiTestCaseDTO">
        <result column="tags" jdbcType="VARCHAR" property="tags" typeHandler="io.metersphere.handler.ListTypeHandler" />
    </resultMap>

    <resultMap id="TestCaseProviderDTO" type="io.metersphere.dto.TestCaseProviderDTO">
        <result column="tags" jdbcType="VARCHAR" property="tags" typeHandler="io.metersphere.handler.ListTypeHandler" />
    </resultMap>

    <resultMap id="BaseResultMap" type="io.metersphere.api.domain.ApiTestCase">
        <result column="tags" jdbcType="VARCHAR" property="tags" typeHandler="io.metersphere.handler.ListTypeHandler" />
    </resultMap>
    <update id="batchMoveGc">
        UPDATE api_test_case
        SET deleted = 1,
        delete_time = #{deleteTime},
        delete_user = #{userId}
        WHERE id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <update id="updatePos">
        update api_test_case
        set pos =#{pos}
        where id = #{id}
    </update>

    <select id="getPos" resultType="java.lang.Long">
        SELECT pos
        FROM api_test_case
        WHERE project_id = #{projectId}
        ORDER BY pos DESC
        LIMIT 1;

    </select>
    <select id="listByRequest" resultMap="ApiTestCaseDTO">
        SELECT
        atc.id,
        atc.project_id,
        atc.name,
        atc.status,
        atc.api_definition_id,
        atc.priority,
        atc.create_user,
        atc.update_user,
        atc.create_time,
        atc.update_time,
        atc.delete_user,
        atc.delete_time,
        atc.num,
        atc.last_report_status,
        atc.last_report_id,
        atc.environment_id,
        atc.tags,
        a.module_id,
        a.path,
        a.method,
        a.protocol,
        atc.pos
        FROM
        api_test_case atc
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        WHERE atc.deleted =#{deleted}
        <include refid="queryWhereCondition"/>
        <if test="!isRepeat">
            AND atc.id not in (
            select test_plan_api_case.api_case_id from test_plan_api_case where test_plan_api_case.test_plan_id = #{request.testPlanId}
            )
        </if>
    </select>
    <select id="getIds" resultType="java.lang.String">
        SELECT
        atc.id
        FROM
        api_test_case atc
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        WHERE atc.deleted =#{deleted}
        <include refid="queryWhereConditionByBatch"/>
    </select>
    <select id="getCaseInfoByApiIds" resultType="io.metersphere.api.domain.ApiTestCase">
        SELECT id,
        name,
        api_definition_id,
        project_id
        FROM api_test_case
        WHERE deleted = #{deleted} and api_definition_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getCaseInfoByIds" resultType="io.metersphere.api.domain.ApiTestCase">
        SELECT id,
        name
        FROM api_test_case
        WHERE deleted = #{deleted} and id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getPrePos" resultType="java.lang.Long">
        select `pos` from api_test_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &lt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>


    <select id="getLastPos" resultType="java.lang.Long">
        select `pos` from api_test_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &gt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>

    <select id="findPassRateByIds" resultType="io.metersphere.api.dto.definition.CasePassDTO">
        SELECT
        atc.api_test_case_id as id,
        CONCAT(
        FORMAT(
        SUM(
        IF
        ( ar.`status` = 'success', 1, 0 ))/ COUNT( ar.id )* 100,
        2
        ),
        '%'
        ) value
        FROM
        api_report ar
        left join api_test_case_record atc on atc.api_report_id = ar.id
        WHERE
        atc.api_test_case_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        GROUP BY
        atc.api_test_case_id
    </select>
    <select id="selectIdsByCaseIds" resultType="java.lang.String">
        SELECT
        atc.api_definition_id
        FROM
        api_test_case atc
        WHERE
        atc.deleted = 1
        AND atc.id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="getCaseIds" resultType="java.lang.String">
        SELECT
        atc.id
        FROM
        api_test_case atc
        WHERE
        atc.deleted = #{deleted}
        AND atc.api_definition_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="getIdsByApiIds" resultType="java.lang.String">
        SELECT
        atc.id
        FROM
        api_test_case atc
        WHERE
         atc.api_definition_id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="listByProviderRequest" resultMap="TestCaseProviderDTO">
        SELECT
        atc.id,
        atc.num,
        atc.pos,
        atc.project_id,
        atc.name,
        atc.priority,
        atc.tags,
        atc.version_id,
        v.name as versionName,
        atc.create_user,
        u.name as createUserName,
        atc.create_time
        FROM
        api_test_case atc
        LEFT JOIN project_version v ON atc.version_id = v.id
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        LEFT JOIN user u ON atc.create_user = u.id
        WHERE atc.deleted =#{deleted}
        and atc.id not in
        (
        select associate.${apiCaseColumnName} from ${table} associate  where  associate.${sourceName} = #{request.sourceId}
        )
        <include refid="queryWhereCondition"/>
    </select>

    <select id="countModuleIdByProviderRequest" resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT a.module_id AS moduleId, count(atc.id) AS dataCount
        FROM api_test_case atc inner join api_definition a on atc.api_definition_id = a.id
        WHERE atc.deleted =#{deleted}
        and atc.id not in
        (
        select associate.${apiCaseColumnName} from ${table} associate  where  associate.${sourceName} = #{request.sourceId}
        )
        <include refid="queryWhereCondition"/>
        GROUP BY a.module_id
    </select>

    <select id="selectIdAndParentIdByProjectId" resultType="io.metersphere.system.dto.sdk.BaseTreeNode">
        SELECT a.id,
        a.parent_id AS parentId
        FROM  api_definition_module a
        WHERE a.project_id = #{projectId}
        ORDER BY pos
    </select>

    <select id="getTestCaseByProvider" resultType="io.metersphere.api.domain.ApiTestCase">
        SELECT
        atc.id, atc.version_id
        FROM
        api_test_case atc
        INNER JOIN api_definition a ON atc.api_definition_id = a.id
        WHERE atc.deleted =#{deleted}
        <include refid="queryWhereConditionByBatch"/>
    </select>
    <select id="getTagsByIds" resultMap="BaseResultMap">
        SELECT
        atc.id,
        atc.tags
        FROM
        api_test_case atc
        WHERE atc.deleted =#{deleted}
        and atc.id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getExecuteList" resultType="io.metersphere.api.dto.definition.ExecuteReportDTO">
        select
        distinct api_report.id,
        api_report.name,
        api_report.status,
        api_report.exec_status,
        api_report.start_time,
        api_report.create_user,
        api_report.trigger_mode,
        api_report.test_plan_case_id,
        api_report.deleted,
        api_report.integrated
        from api_report
        left join api_test_case_record atc on atc.api_report_id = api_report.id
        where
        <if test="request.id != null and request.id != ''">
            atc.api_test_case_id = #{request.id}
        </if>
        <include refid="report_filters">
            <property name="filter" value="request.filter"/>
        </include>
    </select>
    <select id="selectVersionOptionByIds" resultType="io.metersphere.system.dto.sdk.OptionDTO">
        select
        api_test_case.id, project_version.name as name
        from api_test_case
        LEFT JOIN project_version ON project_version.id = api_test_case.version_id
        where api_test_case.id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getIdsByModules" resultType="java.lang.String">
        select api_test_case.id from api_test_case left join api_definition on api_definition.id = api_test_case.api_definition_id
        where api_test_case.deleted = false
        <if test="request.projectId != null and request.projectId != ''">
            and api_test_case.project_id = #{request.projectId}
        </if>
        <if test="request.protocols != null and request.protocols.size() > 0">
            AND api_definition.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
          </foreach>
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and api_definition.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <if test="request.versionId != null and request.versionId != ''">
            and api_test_case.version_id = #{request.versionId}
        </if>
    </select>
    <select id="getApiCaseDefinitionInfo" resultType="io.metersphere.api.domain.ApiTestCase">
        select api_definition_id, id
        from api_test_case
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="selectIdByProjectIdOrderByPos" resultType="java.lang.String">
        SELECT id
        FROM api_test_case
        WHERE project_id = #{projectId}
        ORDER BY pos
    </select>
    <select id="selectDragInfoById" resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM api_test_case
        WHERE id = #{id}
    </select>
    <select id="selectNodeByPosOperator"
            parameterType="io.metersphere.project.dto.NodeSortQueryParam"
            resultType="io.metersphere.project.dto.DropNode">
        SELECT id, pos
        FROM api_test_case
        WHERE project_id = #{parentId}
        <if test="operator == 'moreThan'">
            AND pos &gt; #{pos}
        </if>
        <if test="operator == 'lessThan'">
            AND pos &lt; #{pos}
        </if>
        ORDER BY pos
        <if test="operator == 'lessThan' or operator == 'latest'">
            DESC
        </if>
        LIMIT 1
    </select>
    <select id="getApiCaseExecuteInfoByIds" resultType="io.metersphere.api.domain.ApiTestCase">
        select id, name, environment_id, project_id
        from api_test_case
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="listUnRelatedCaseWithBug" resultMap="TestCaseProviderDTO">
        select
        ac.id,
        ac.num,
        ac.name,
        ac.priority,
        ac.project_id,
        ac.tags,
        pv.name as versionName,
        ac.create_user,
        u.name as createUserName,
        ac.create_time
        from api_test_case ac
        inner join api_definition ad on ac.api_definition_id = ad.id
        left join project_version pv ON ac.version_id = pv.id
        left join user u ON ac.create_user = u.id
        where ac.deleted = #{deleted}
        and ac.project_id = #{request.projectId}
        and ac.id not in
        (
            select brc.case_id from bug_relation_case brc where brc.bug_id = #{request.sourceId} and brc.case_type = #{request.sourceType}
        )
        <include refid="queryByTestCaseProviderParam"/>
        order by
        <if test="sort != null and sort != ''">
            ac.${sort}
        </if>
        <if test="sort == null or sort == ''">
            ac.create_time desc
        </if>
    </select>

    <select id="getSelectIdsByAssociateParam" resultType="java.lang.String">
        select ac.id
        from api_test_case ac
        inner join api_definition ad on ac.api_definition_id = ad.id
        where ac.deleted = #{deleted}
        and ac.project_id = #{request.projectId}
        and ac.id not in
        (
        select brc.case_id from bug_relation_case brc where brc.bug_id = #{request.sourceId} and brc.case_type = #{request.sourceType}
        )
        <include refid="queryByAssociateParam"/>
    </select>

    <sql id="report_filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='integrated'">
                            and api_report.integrated in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='status'">
                            and api_report.status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='triggerMode'">
                            and api_report.trigger_mode in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="queryWhereConditionByBatch">
        <if test="request.protocols != null and request.protocols.size() > 0">
            and a.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
            </foreach>
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and atc.api_definition_id = #{request.apiDefinitionId}
        </if>
        <if test="request.projectId != null and request.projectId!=''">
            and atc.project_id = #{request.projectId}
        </if>
        <if test="request.condition.keyword != null and request.condition.keyword !=''">
            and (
            atc.name like concat('%', #{request.condition.keyword},'%')
            or atc.num like concat('%', #{request.condition.keyword},'%')
            or a.path like concat('%', #{request.condition.keyword},'%')
            or atc.tags like concat('%', #{request.condition.keyword},'%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="atc"/>
        </include>
    </sql>

    <sql id="queryWhereCondition">
        <if test="request.protocols != null and request.protocols.size() > 0">
            and a.protocol in
            <foreach collection="request.protocols" item="protocol" separator="," open="(" close=")">
                #{protocol}
            </foreach>
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and atc.api_definition_id = #{request.apiDefinitionId}
        </if>
        <if test="request.projectId != null and request.projectId!=''">
            and atc.project_id = #{request.projectId}
        </if>
        <if test="request.keyword != null and request.keyword !=''">
            and (
            atc.name like concat('%', #{request.keyword},'%')
            or atc.num like concat('%', #{request.keyword},'%')
            or a.path like concat('%', #{request.keyword},'%')
            or atc.tags like concat('%', #{request.keyword},'%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="atc"/>
        </include>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key == 'priority'">
                            and atc.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='status'">
                            and atc.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='caseStatus' or key=='case_status'">
                            and atc.case_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='lastReportStatus'">
                            and atc.last_report_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='createUser'">
                            and atc.create_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                        <when test="key=='updateUser'">
                            and atc.update_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                        <when test="key=='deleteUser'">
                            and atc.delete_user in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                (#{value})
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null and request.versionId != ''">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.versionId == null and request.versionId != '' and request.apiDefinitionId == null and request.apiDefinitionId == ''">
            AND a.latest = 1
        </if>
    </sql>

    <sql id="queryByTestCaseProviderParam">
        <!-- 待补充关联Case弹窗中的高级搜索条件filter, combine -->
        <if test="request.keyword != null and request.keyword != ''">
            and (
            ac.num like concat('%', #{request.keyword}, '%')
            or ac.name like concat('%', #{request.keyword}, '%')
            or ac.tags like concat('%', #{request.keyword}, '%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and ac.module_id in
            <foreach collection="request.moduleIds" item="moduleId" open="(" separator="," close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.protocols != null and request.protocols.size() > 0">
            and ad.protocol in
            <foreach collection="request.protocols" item="protocol" open="(" separator="," close=")">
                #{protocol}
            </foreach>
        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and ac.api_definition_id = #{request.apiDefinitionId}
        </if>
    </sql>

    <sql id="queryByAssociateParam">
        <!-- 待补充关联Case弹窗中的高级搜索条件filter, combine -->
        <if test="request.condition.keyword != null and request.condition.keyword != ''">
            and (
            ac.num like concat('%', #{request.keyword}, '%')
            or ac.name like concat('%', #{request.keyword}, '%')
            or ac.tags like concat('%', #{request.keyword}, '%')
            )
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and ac.module_id in
            <foreach collection="request.moduleIds" item="moduleId" open="(" separator="," close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.protocols != null and request.protocols.size() > 0">
            and ad.protocol in
            <foreach collection="request.protocols" item="protocol" open="(" separator="," close=")">
                #{protocol}
            </foreach>

        </if>
        <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
            and ac.api_definition_id = #{request.apiDefinitionId}
        </if>
    </sql>
</mapper>
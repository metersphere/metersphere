<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.functional.mapper.ExtCaseReviewFunctionalCaseMapper">

    <select id="list" resultType="io.metersphere.functional.dto.FunctionalCaseReviewDTO">
        SELECT
        cf.*, cr.num as reviewNum, cr.name as reviewName, cr.status as reviewStatus
        FROM
        case_review_functional_case cf left join case_review cr on cf.review_id = cr.id
        where cf.case_id = #{request.caseId}
        <if test="request.keyword != null and request.keyword != ''">
            and (
            cr.num like concat('%', #{request.keyword},'%')
            or cr.name like concat('%', #{request.keyword},'%')
            )
        </if>
    </select>

    <update id="updateStatus">
        update case_review_functional_case
        set status      = #{status},
            update_time = UNIX_TIMESTAMP() * 1000
        where review_id = #{reviewId}
          and case_id = #{caseId}
    </update>


    <select id="getCaseIdsByReviewId" parameterType="java.lang.String" resultType="java.lang.String">
        select case_id
        from case_review_functional_case
        where review_id = #{reviewId}
    </select>

    <select id="page" resultType="io.metersphere.functional.dto.ReviewFunctionalCaseDTO">
        SELECT
        crfc.id as id,
        crfc.review_id as reviewId,
        crfc.case_id as caseId,
        crfc.`status` as status,
        crfc.create_time as createTime,
        functional_case.create_user as createUser,
        user.name as createUserName,
        functional_case.version_id as versionId,
        functional_case.module_id as moduleId,
        functional_case.name as name,
        functional_case.num as num,
        functional_case.case_edit_type as caseEditType
        FROM
        case_review_functional_case crfc
        LEFT JOIN functional_case ON crfc.case_id = functional_case.id
        LEFT JOIN user ON functional_case.create_user = user.id
        WHERE
        review_id = #{request.reviewId}
        AND functional_case.deleted = #{deleted}
        <if test="userId != null and userId != ''">
            AND crfc.case_id in (select case_id from case_review_functional_case_user crfcu where crfcu.review_id =
            #{request.reviewId} and crfcu.user_id = #{userId})
        </if>
        <include refid="queryWhereCondition"/>
        order by
        <if test="sort != null and sort != ''">
            functional_case.${sort}
        </if>
        <if test="sort == null or sort == ''">
            crfc.pos desc
        </if>
    </select>


    <sql id="queryWhereCondition">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and functional_case.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.keyword != null and request.keyword != ''">
            and (
            functional_case.name like concat('%', #{request.keyword},'%')
            or functional_case.num like concat('%', #{request.keyword},'%')
            or functional_case.tags like concat('%', #{request.keyword},'%')
            )
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <choose>
            <when test='request.searchMode == "AND"'>
                AND
                <include refid="queryCombine"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryCombine"/>
                )
            </when>
        </choose>
    </sql>


    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='status'">
                            and crfc.status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='last_execute_result'">
                            and functional_case.last_execute_result in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='version_id'">
                            and functional_case.version_id in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                        <when test="key=='caseLevel'">
                            and functional_case.id in (
                            select case_id from functional_case_custom_field where `value` in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <when test="key.startsWith('custom_single')">
                            and functional_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_single-',field_id) =
                            #{key}
                            and trim(both '"' from `value`) in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                        </when>
                        <when test="key.startsWith('custom_multiple')">
                            and functional_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_multiple-',field_id) =
                            #{key}
                            and JSON_CONTAINS(`value`, json_array(#{value}))
                        </when>
                        <when test="key == 'create_user' || key == 'createUserName'">
                            and functional_case.create_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="queryCombine">
        <if test="request.combine != null">
            <include refid="combine">
                <property name="condition" value="request.combine"/>
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        1=1
    </sql>

    <sql id="combine">
        <!-- 名称 -->
        <if test='${condition}.name != null'>
            functional_case.name
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- id -->
        <if test='${condition}.id != null'>
            functional_case.num
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.id"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 所属模块 -->
        <if test='${condition}.moduleId != null'>
            functional_case.moduleId
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.moduleId"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建人 -->
        <if test='${condition}.createUser != null'>
            functional_case.create_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 创建时间 -->
        <if test='${condition}.createTime != null'>
            functional_case.create_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新人 -->
        <if test='${condition}.updateUser != null'>
            functional_case.update_user
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateUser"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 更新时间 -->
        <if test='${condition}.updateTime != null'>
            functional_case.update_time
            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 标签 -->
        <if test='${condition}.tags != null'>
            <include refid="queryTag">
                <property name="searchMode" value="${searchMode}"/>
                <property name="combineTag" value="${condition}.tags"/>
            </include>
        </if>
        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                functional_case.id ${custom.operator} (
                select case_id from functional_case_custom_field where field_id = #{custom.id}
                <choose>
                    <when test="custom.type == 'List'">
                        and JSON_CONTAINS(`value`, json_array(#{custom.value}))
                    </when>
                    <when test="custom.type == 'date' or custom.type == 'datetime'">
                        and `value`
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </when>
                    <otherwise>
                        and trim(both '"' from `value`)
                        <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                            <property name="object" value="custom"/>
                        </include>
                    </otherwise>
                </choose>
                )
                <include refid="queryType">
                    <property name="searchMode" value="${searchMode}"/>
                </include>
            </foreach>
        </if>
    </sql>

    <sql id="queryType">
        <choose>
            <when test='${searchMode} == "AND"'>
                AND
            </when>
            <when test='${searchMode} == "OR"'>
                OR
            </when>
        </choose>
    </sql>

    <sql id="queryTag">
        <!-- 不包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "not like"'>
            (
            functional_case.tags is null or functional_case.tags = '[]' or
            <foreach collection="${combineTag}.value" item="tag" separator="and" open="(" close=")">
                !JSON_CONTAINS(functional_case.tags, JSON_ARRAY(#{tag}))
            </foreach>
            )
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 包含 -->
        <if test='${combineTag}.value.size() > 0 and ${combineTag}.operator == "like"'>
            <foreach collection="${combineTag}.value" item="tag" separator="or" open="(" close=")">
                JSON_CONTAINS(functional_case.tags, JSON_ARRAY(#{tag}))
            </foreach>
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
        <!-- 空 -->
        <if test='${combineTag}.operator == "is null"'>
            (functional_case.tags is null or functional_case.tags = '[]')
            <include refid="queryType">
                <property name="searchMode" value="${searchMode}"/>
            </include>
        </if>
    </sql>

    <select id="getIds" resultType="java.lang.String">
        SELECT
        crfc.id as id
        FROM
        case_review_functional_case crfc
        LEFT JOIN functional_case ON crfc.case_id = functional_case.id
        WHERE
        review_id = #{request.reviewId}
        AND functional_case.deleted = #{deleted}
        <if test="userId != null and userId != ''">
            AND crfc.case_id in (select case_id from case_review_functional_case_user crfcu where crfcu.review_id =
            #{request.reviewId} and crfcu.user_id = #{userId})
        </if>
        <include refid="queryWhereConditionByBaseQueryRequest"/>
    </select>

    <select id="getListByRequest" resultType="io.metersphere.functional.domain.CaseReviewFunctionalCase">
        SELECT
        crfc.*
        FROM
        case_review_functional_case crfc
        LEFT JOIN functional_case ON crfc.case_id = functional_case.id
        WHERE
        review_id = #{request.reviewId}
        AND functional_case.deleted = #{deleted}
        <if test="userId != null and userId != ''">
            AND crfc.case_id in (select case_id from case_review_functional_case_user crfcu where crfcu.review_id =
            #{request.reviewId} and crfcu.user_id = #{userId})
        </if>
        <include refid="queryWhereConditionByBaseQueryRequest"/>
        <if test="request.excludeIds != null and request.excludeIds.size() > 0">
            and crfc.id not in
            <foreach collection="request.excludeIds" item="excludeId" open="(" separator="," close=")">
                #{excludeId}
            </foreach>
        </if>
    </select>


    <sql id="queryWhereConditionByBaseQueryRequest">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and functional_case.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
        </if>
        <if test="request.condition.keyword != null">
            and (
            functional_case.name like concat('%', #{request.keyword},'%')
            or functional_case.num like concat('%', #{request.keyword},'%')
            or functional_case.tags like concat('%', #{request.keyword},'%')
            )
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
        <choose>
            <when test='request.condition.searchMode == "AND"'>
                AND
                <include refid="baseQueryCombine"/>
            </when>
            <when test='request.condition.searchMode == "OR"'>
                and (
                <include refid="baseQueryCombine"/>
                )
            </when>
        </choose>
    </sql>

    <sql id="baseQueryCombine">
        <if test="request.condition.combine != null">
            <include refid="combine">
                <property name="condition" value="request.condition.combine"/>
                <property name="searchMode" value="request.condition.searchMode"/>
            </include>
        </if>
        1=1
    </sql>


    <select id="getPos" resultType="java.lang.Long">
        SELECT pos
        FROM case_review_functional_case
        WHERE review_id = #{reviewId}
        ORDER BY pos DESC
        LIMIT 1;
    </select>

    <select id="getList" resultType="io.metersphere.functional.domain.CaseReviewFunctionalCase">
        SELECT
        crfc.id, crfc.review_id, crfc.case_id, crfc.status, crfc.create_time, crfc.create_user
        FROM
        case_review_functional_case crfc
        LEFT JOIN functional_case fc ON crfc.case_id = fc.id
        WHERE
        fc.deleted = #{deleted}
        <if test="reviewId != null and reviewId != ''">
            and crfc.review_id = #{reviewId}
        </if>
        <if test="reviewIds != null and reviewIds.size() > 0">
            and crfc.review_id in
            <foreach collection="reviewIds" item="reviewId" separator="," open="(" close=")">
                #{reviewId}
            </foreach>
        </if>
    </select>

    <select id="getListExcludes" resultType="io.metersphere.functional.domain.CaseReviewFunctionalCase">
        SELECT
        crfc.id, crfc.review_id, crfc.case_id, crfc.status, crfc.create_time, crfc.create_user
        FROM
        case_review_functional_case crfc
        LEFT JOIN functional_case fc ON crfc.case_id = fc.id
        WHERE
        fc.deleted = #{deleted}
        <if test="reviewIds != null and reviewIds.size() > 0">
            and crfc.review_id in
            <foreach collection="reviewIds" item="reviewId" separator="," open="(" close=")">
                #{reviewId}
            </foreach>
        </if>
        <if test="caseIds != null and caseIds.size() > 0">
            and fc.id not in
            <foreach collection="caseIds" item="caseId" separator="," open="(" close=")">
                #{caseId}
            </foreach>
        </if>
    </select>

    <select id="getPrePos" resultType="java.lang.Long">
        select `pos` from case_review_functional_case where review_id = #{reviewId}
        <if test="basePos != null">
            and `pos` &lt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>


    <select id="getLastPos" resultType="java.lang.Long">
        select `pos` from case_review_functional_case where review_id = #{reviewId}
        <if test="basePos != null">
            and `pos` &gt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>

    <select id="getCaseIdsByIds" resultType="io.metersphere.functional.domain.CaseReviewFunctionalCase">
        select id, case_id as caseId, status from case_review_functional_case where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="countModuleIdByRequest" resultType="io.metersphere.functional.dto.FunctionalCaseModuleCountDTO">
        SELECT functional_case.module_id AS moduleId, count(functional_case.id) AS dataCount, functional_case.project_id
        AS projectId, project.name AS projectName
        FROM case_review_functional_case crfc
        LEFT JOIN functional_case ON crfc.case_id = functional_case.id
        LEFT JOIN project ON functional_case.project_id = project.id
        WHERE crfc.review_id = #{request.reviewId}
        AND functional_case.deleted = #{deleted}
        <if test="userId != null and userId != ''">
            AND crfc.case_id in (select crfcu.case_id from case_review_functional_case_user crfcu where crfcu.review_id
            = #{request.reviewId} and crfcu.user_id = #{userId})
        </if>
        <include refid="queryWhereCondition"/>
        GROUP BY module_id
    </select>

    <select id="caseCount"
            resultType="java.lang.Long">
        SELECT count(functional_case.id)
        FROM case_review_functional_case crfc LEFT JOIN functional_case ON crfc.case_id = functional_case.id
        WHERE crfc.review_id = #{request.reviewId}
        AND functional_case.deleted = #{deleted}
        <if test="userId != null and userId != ''">
            AND crfc.case_id in (select case_id from case_review_functional_case_user crfcu where crfcu.review_id =
            #{request.reviewId} and crfcu.user_id = #{userId})
        </if>
        <include refid="queryWhereCondition"/>
    </select>


</mapper>
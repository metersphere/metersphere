<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.functional.mapper.ExtFunctionalCaseMapper">


    <select id="getPos" resultType="java.lang.Long">
        SELECT
            pos
        FROM
            functional_case
        WHERE
            project_id = #{projectId}
        ORDER BY
            pos DESC
            LIMIT 1;
    </select>


    <update id="updateFunctionalCaseModule">
        UPDATE functional_case
        SET module_id = #{moduleId}
        WHERE
            ref_id = #{refId}
    </update>


    <select id="getFunctionalCaseByRefId" resultType="io.metersphere.functional.dto.FunctionalCaseVersionDTO">
        SELECT
            id,
            NAME,
            version_id,
            project_id
        FROM
            functional_case
        WHERE
            ref_id = #{refId}
    </select>

    <select id="getFunctionalCaseIds" resultType="java.lang.String">
        SELECT
            id
        FROM
            functional_case
        WHERE
            project_id = #{projectId}
    </select>

    <update id="removeToTrashByModuleIds" parameterType="java.lang.String">
        UPDATE functional_case SET deleted = true, module_id = 'root'  WHERE module_id IN
        <foreach collection="moduleIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="checkCaseByModuleIds" resultType="io.metersphere.functional.domain.FunctionalCase">
        SELECT
            id, name, module_id, create_user
        FROM
            functional_case
        WHERE
        deleted = false
        AND
            module_id IN
        <foreach collection="moduleIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>


    <select id="list" resultType="io.metersphere.functional.dto.FunctionalCasePageDTO">
        SELECT
            id,
            num,
            NAME,
            module_id,
            version_id,
            create_user,
            create_time,
            update_user,
            update_time,
            review_status,
            last_execute_result,
            tags
        FROM
            functional_case
        where deleted = #{deleted}
        and functional_case.project_id = #{request.projectId}
        <choose>
            <when test='request.searchMode == "AND"'>
               AND <include refid="queryWhereCondition"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryWhereCondition"/>
                )
            </when>
        </choose>

    </select>

    <update id="recoverCase">
        UPDATE functional_case
        SET deleted = false,
            update_user =  #{userId},
            update_time = #{time},
            delete_user = null,
            delete_time = null
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="recoverCaseByRefIds">
        UPDATE functional_case
        SET deleted = false,
        update_user =  #{userId},
        update_time = #{time},
        delete_user = null,
        delete_time = null
        WHERE ref_id IN
        <foreach collection="refIds" item="refId" open="(" separator="," close=")">
            #{refId}
        </foreach>
    </update>

    <sql id="queryWhereCondition">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            functional_case.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <if test="request.keyword != null">
            (
            functional_case.name like concat('%', #{request.keyword},'%')
            or functional_case.num like concat('%', #{request.keyword},'%')
            or JSON_CONTAINS(tags, concat('["',#{request.keyword},'"]'))
            )
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <include refid="filters">
            <property name="filter" value="request.filter"/>
        </include>
        <include refid="combine">
            <property name="condition" value="request.combine"/>
        </include>
        <include refid="queryAssociationCase"/>
        <include refid="queryAssociationBug"/>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="functional_case"/>
        </include>
    </sql>

    <sql id="filters">
        <if test="${filter} != null and ${filter}.size() > 0">
            <foreach collection="${filter}.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='review_status'">
                            functional_case.review_status in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                        <when test="key=='last_execute_result'">
                            functional_case.last_execute_result in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                        <when test="key=='version_id'">
                            functional_case.version_id in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                        <when test="key.startsWith('custom_single')">
                            test_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_single-',field_id) =
                            #{key}
                            and trim(both '"' from `value`) in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            )
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                        <when test="key.startsWith('custom_multiple')">
                            test_case.id in (
                            select resource_id from custom_field_test_case where concat('custom_multiple-',field_id) =
                            #{key}
                            and JSON_CONTAINS(`value`, json_array(#{value}))
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                        <when test="key=='create_user'">
                            functional_case.create_user in
                            <include refid="io.metersphere.system.mapper.BaseMapper.filterInWrapper"/>
                            <include refid="queryType">
                                <property name="searchMode" value="request.searchMode"/>
                            </include>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="combine">
        <if test="request.combine != null">
            <if test='${condition}.name != null'>
                functional_case.name
                <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                    <property name="object" value="${condition}.name"/>
                </include>
                <include refid="queryType">
                    <property name="searchMode" value="request.searchMode"/>
                </include>
            </if>
            <if test='${condition}.id != null'>
                functional_case.num
                <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                    <property name="object" value="${condition}.id"/>
                </include>
                <include refid="queryType">
                    <property name="searchMode" value="request.searchMode"/>
                </include>
            </if>
            <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
                <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                    functional_case.id ${custom.operator} (
                    select case_id from functional_case_custom_field where field_id = #{custom.id}
                    <choose>
                        <when test="custom.type == 'List'">
                           and JSON_CONTAINS(`value`, json_array(#{custom.value}))
                        </when>
                        <when test="custom.type == 'date' or custom.type == 'datetime'">
                            and `value`
                            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <otherwise>
                            and trim(both '"' from `value`)
                            <include refid="io.metersphere.system.mapper.BaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </otherwise>
                    </choose>
                    )
                    <include refid="queryType">
                        <property name="searchMode" value="request.searchMode"/>
                    </include>
                </foreach>
            </if>
        </if>
    </sql>

    <sql id="queryVersionCondition">
        <if test="request.versionId != null">
            ${versionTable}.version_id = #{request.versionId}
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <if test="request.refId != null">
            ${versionTable}.ref_id = #{request.refId}
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <if test="request.versionId == null and request.refId == null">
            ${versionTable}.latest = 1
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        1 = 1
    </sql>

    <sql id="queryAssociationCase">
        <if test="request.associationCase != null">
            <choose>
                <when test="request.associationCase.operatorType == 'EMPTY'">
                    functional_case.id not in (
                    select functional_case.id from functional_case LEFT JOIN functional_case_test on functional_case.id
                    = functional_case_test.case_id where functional_case_test.source_type in
                    <foreach collection="request.associationCase.caseType" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                    and functional_case.project_id=#{request.projectId} and functional_case.deleted = false and
                    <include refid="queryVersionCondition">
                        <property name="versionTable" value="functional_case"/>
                    </include>
                    )
                    <include refid="queryType">
                        <property name="searchMode" value="request.searchMode"/>
                    </include>
                </when>
                <when test="request.associationCase.operatorType == 'NOT_EMPTY'">
                    functional_case.id in (
                    select functional_case.id from functional_case LEFT JOIN functional_case_test on functional_case.id
                    = functional_case_test.case_id where functional_case_test.source_type in
                    <foreach collection="request.associationCase.caseType" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                    and functional_case.project_id=#{request.projectId} and functional_case.deleted = false and
                    <include refid="queryVersionCondition">
                        <property name="versionTable" value="functional_case"/>
                    </include>
                    )
                    <include refid="queryType">
                        <property name="searchMode" value="request.searchMode"/>
                    </include>
                </when>
            </choose>
        </if>
    </sql>

    <sql id="queryAssociationBug">
        <if test="request.associationBug != null">
            <choose>
                <when test="request.associationBug.operatorType == 'EMPTY'">
                    functional_case.id not in (
                    select functional_case.id from functional_case LEFT JOIN bug_relation_case on functional_case.id =
                    bug_relation_case.case_id where bug_relation_case.case_type = 'functional'
                    and functional_case.project_id=#{request.projectId} and functional_case.deleted = false and
                    <include refid="queryVersionCondition">
                        <property name="versionTable" value="functional_case"/>
                    </include>
                    )
                    <include refid="queryType">
                        <property name="searchMode" value="request.searchMode"/>
                    </include>
                </when>
                <when test="request.associationBug.operatorType == 'NOT_EMPTY'">
                    functional_case.id in (
                    select functional_case.id from functional_case LEFT JOIN bug_relation_case on functional_case.id =
                    bug_relation_case.case_id where bug_relation_case.case_type = 'functional'
                    and functional_case.project_id=#{request.projectId} and functional_case.deleted = false and
                    <include refid="queryVersionCondition">
                        <property name="versionTable" value="functional_case"/>
                    </include>
                    )
                    <include refid="queryType">
                        <property name="searchMode" value="request.searchMode"/>
                    </include>
                </when>
            </choose>
        </if>
    </sql>


    <sql id="queryType">
        <choose>
            <when test='${searchMode} == "AND"'>
                AND
            </when>
            <when test='${searchMode} == "OR"'>
                OR
            </when>
        </choose>
    </sql>


    <select id="getIds" resultType="java.lang.String">
        SELECT
            id
        FROM
            functional_case
        WHERE
            functional_case.project_id = #{projectId}
            and functional_case.deleted = #{deleted}
        <choose>
            <when test='request.searchMode == "AND"'>
                AND <include refid="queryWhereConditionByBaseQueryRequest"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryWhereConditionByBaseQueryRequest"/>
                )
            </when>
        </choose>
    </select>

    <sql id="queryWhereConditionByBaseQueryRequest">
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            functional_case.module_id in
            <foreach collection="request.moduleIds" item="moduleId" separator="," open="(" close=")">
                #{moduleId}
            </foreach>
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <if test="request.condition.keyword != null">
            (
            functional_case.name like concat('%', #{request.keyword},'%')
            or functional_case.num like concat('%', #{request.keyword},'%')
            or JSON_CONTAINS(tags, concat('["',#{request.keyword},'"]'))
            )
            <include refid="queryType">
                <property name="searchMode" value="request.searchMode"/>
            </include>
        </if>
        <include refid="filters">
            <property name="filter" value="request.condition.filter"/>
        </include>
        <if test="request.condition.combine != null">
            <include refid="combine">
                <property name="condition" value="request.condition.combine"/>
            </include>
        </if>
        <include refid="queryVersionCondition">
            <property name="versionTable" value="functional_case"/>
        </include>
    </sql>

    <select id="getRefIds" resultType="java.lang.String">
        SELECT
            ref_id
        FROM
            functional_case
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = #{deleted}
        group by ref_id
    </select>


    <update id="batchDelete">
        update functional_case
        set deleted = 1,
        delete_user = #{userId},
        delete_time = UNIX_TIMESTAMP()*1000
        where ref_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = false
    </update>

    <select id="getLogInfo" resultType="io.metersphere.functional.domain.FunctionalCase">
        SELECT
            id,
            name,
            project_id
        from
            functional_case
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = #{deleted}
    </select>


    <update id="batchMoveModule">
        update functional_case
        set module_id = #{request.moduleId},
            update_user = #{userId},
            update_time = UNIX_TIMESTAMP()*1000
        where ref_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = false
        and project_id = #{request.projectId}
    </update>


    <select id="getTagsByIds" resultType="io.metersphere.functional.domain.FunctionalCase">
        select id, tags from functional_case
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = false
    </select>


    <update id="batchUpdate">
        update functional_case
        <set>
            <if test="functionalCase.tags != null and functionalCase.tags != ''">
                tags = #{functionalCase.tags},
            </if>
            <if test="functionalCase.updateUser != null and functionalCase.updateUser != ''">
                update_user = #{functionalCase.updateUser},
            </if>
            <if test="functionalCase.updateTime != null">
                update_time = #{functionalCase.updateTime},
            </if>
        </set>
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = false
        and project_id = #{functionalCase.projectId}
    </update>

    <select id="countModuleIdByKeywordAndFileType"  resultType="io.metersphere.project.dto.ModuleCountDTO">
        SELECT module_id AS moduleId, count(id) AS dataCount
        FROM functional_case
        WHERE deleted = #{deleted}
        AND project_id = #{request.projectId}
        <choose>
            <when test='request.searchMode == "AND"'>
                AND <include refid="queryWhereCondition"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryWhereCondition"/>
                )
            </when>
        </choose>
        GROUP BY module_id
    </select>

    <select id="caseCount"
            resultType="java.lang.Long">
        SELECT count(id)
        FROM functional_case
        WHERE deleted = #{deleted}
        AND project_id = #{request.projectId}
        <choose>
            <when test='request.searchMode == "AND"'>
                AND <include refid="queryWhereCondition"/>
            </when>
            <when test='request.searchMode == "OR"'>
                and (
                <include refid="queryWhereCondition"/>
                )
            </when>
        </choose>
    </select>


    <select id="getPrePos" resultType="java.lang.Long">
        select `pos` from functional_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &lt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>


    <select id="getLastPos" resultType="java.lang.Long">
        select `pos` from functional_case where project_id = #{projectId}
        <if test="basePos != null">
            and `pos` &gt; #{basePos}
        </if>
        order by `pos` desc limit 1;
    </select>
</mapper>
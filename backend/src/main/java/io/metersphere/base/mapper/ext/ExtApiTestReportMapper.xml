<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtApiTestReportMapper">

    <resultMap id="BaseResultMap" type="io.metersphere.api.dto.APIReportResult"
               extends="io.metersphere.base.mapper.ApiTestReportMapper.BaseResultMap">
        <result column="test_name" property="testName"/>
        <result column="project_name" property="projectName"/>
        <result column="user_name" property="userName"/>
    </resultMap>

    <sql id="condition">
        <include refid="io.metersphere.base.mapper.ext.ExtApiTestMapper.condition"/>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and r.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.testName != null">
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.testName"/>
            </include>
        </if>
        <if test="${condition}.projectName != null">
            and project.name
            <include refid="condition">
                <property name="object" value="${condition}.projectName"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and r.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and r.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.triggerMode != null">
            and r.trigger_mode
            <include refid="condition">
                <property name="object" value="${condition}.triggerMode"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and r.user_id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>
    <select id="get" resultMap="BaseResultMap">
        SELECT r.*, t.name AS test_name, project.name AS project_name, user.name AS user_name
        FROM api_test_report r JOIN api_test t ON r.test_id = t.id
        LEFT JOIN project ON project.id = t.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            r.id = #{id}
        </where>
        ORDER BY r.update_time DESC
    </select>
    <select id="list" resultMap="BaseResultMap">
        SELECT t.name AS test_name,
        r.name, r.description, r.id, r.test_id, r.create_time, r.update_time, r.status, r.trigger_mode,
        project.name AS project_name, user.name AS user_name
        FROM api_test_report r JOIN api_test t ON r.test_id = t.id
        LEFT JOIN project ON project.id = t.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null">
                and r.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.projectId != null">
                AND project.id = #{request.projectId}
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId,jdbcType=VARCHAR}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and r.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and r.trigger_mode in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
            AND r.status != 'Debug'
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                r.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="listByTestId" resultMap="BaseResultMap">
        SELECT t.name AS test_name,
        r.name, r.description, r.id, r.test_id, r.create_time, r.update_time, r.status,
        project.name AS project_name, user.name AS user_name
        FROM api_test_report r JOIN api_test t ON r.test_id = t.id
        LEFT JOIN project ON project.id = t.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            r.test_id = #{testId}
        </where>
        ORDER BY r.update_time DESC
    </select>



    <select id="selectDashboardTests" resultType="io.metersphere.dto.DashboardTestDTO">
        SELECT min(create_time) AS date, count(api_test_report.id) AS count,
        date_format(from_unixtime(create_time / 1000), '%Y-%m-%d') AS x
        FROM api_test_report
        WHERE test_id IN (SELECT api_test.id
        FROM api_test
        JOIN project ON api_test.project_id = project.id
        WHERE workspace_id = #{workspaceId,jdbcType=VARCHAR})
        AND create_time > #{startTimestamp}
        GROUP BY x
    </select>

</mapper>
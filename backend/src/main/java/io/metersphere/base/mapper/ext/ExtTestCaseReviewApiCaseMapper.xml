<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestCaseReviewApiCaseMapper">
    <insert id="insertIfNotExists" parameterType="io.metersphere.base.domain.TestCaseReviewApiCase">
        -- 查询没有数据再插入
        INSERT INTO test_case_review_api_case(id, test_case_review_id, api_case_id, environment_id, create_time, update_time)
        SELECT #{request.id}, #{request.testCaseReviewId}, #{request.apiCaseId}, #{request.environmentId}, #{request.createTime}, #{request.updateTime}
        FROM DUAL
        WHERE NOT EXISTS(
                SELECT id FROM
                    test_case_review_api_case
                WHERE test_case_review_id = #{request.testCaseReviewId} and api_case_id = #{request.apiCaseId}
            )
    </insert>
    <select id="list" resultType="io.metersphere.api.dto.definition.TestPlanApiCaseDTO">
        select
        t.id, t.environment_id, t.create_time, t.update_time,
        c.id as case_id, c.project_id, c.name, c.api_definition_id, c.priority, c.description, c.create_user_id, c.update_user_id, c.num, c.tags,
        a.module_id, a.path, a.protocol, t.status execResult
        from
        test_case_review_api_case t
        inner join
        api_test_case c
        on t.api_case_id = c.id
        <if test="request.reviewId != null and request.planId!=''">
            and t.test_case_review_id = #{request.reviewId}
        </if>
        inner join
        api_definition a
        on
        c.api_definition_id = a.id
        <if test="request.protocol != null and request.protocol!=''">
            and a.protocol = #{request.protocol}
        </if>
        <choose>
            <when test="request.status == 'Trash'">
                and a.status = 'Trash'
            </when>
            <when test="request.status == null">
                and a.status != 'Trash'
            </when>
            <when test="request.status == ''">
                and a.status != 'Trash'
            </when>
            <when test="request.status == 'running'">
                and t.status IS NULL
            </when>
            <otherwise>
                and t.status = #{request.status}
            </otherwise>
        </choose>
        where 1
        <if test="request.ids != null and request.ids.size() > 0">
            <if test="request.projectId != null and request.projectId!=''">
                and
            </if>
            t.id in
            <foreach collection="request.ids" item="caseId" separator="," open="(" close=")">
                #{caseId}
            </foreach>
        </if>
        <if test="request.name != null and request.name!=''">
            and (c.name like CONCAT('%', #{request.name},'%') or c.tags like CONCAT('%', #{request.name},'%'))
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key == 'priority'">
                            and c.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key == 'user_id'">
                            and c.create_user_id in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'update_time'">
                        t.${order.name} ${order.type}
                    </when>
                    <when test="order.name == 'create_user'">
                        create_user_id ${order.type}
                    </when>
                    <otherwise>
                        ${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="getExecResultByReviewId" resultType="java.lang.String">
        select status
        from
            test_case_review_api_case
        where test_case_review_id= #{reviewId}
    </select>
    <select id="getIdsByReviewId" resultType="java.lang.String">
        select id
        from test_case_review_api_case
        where id = #{reviewId}
    </select>
    <select id="getNotRelevanceCaseIds" resultType="java.lang.String">
        select t.id
        from test_case_review_api_case t
        inner join api_test_case c
        on c.id = t.api_case_id
        <if test="relevanceProjectIds != null and relevanceProjectIds.size() > 0">
            and c.project_id not in
            <foreach collection="relevanceProjectIds" item="projectId" separator="," open="(" close=")">
                #{projectId}
            </foreach>
        </if>
        where t.test_case_review_id = #{reviewId}
    </select>
    <select id="getStatusByTestReviewId" resultType="java.lang.String">
        SELECT `status` FROM test_case_review_api_case WHERE test_case_review_id = #{0}
    </select>

</mapper>
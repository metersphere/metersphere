<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtApiScenarioMapper">

    <resultMap id="BaseResultMap" type="io.metersphere.api.dto.automation.ApiScenarioDTO"
               extends="io.metersphere.base.mapper.ApiScenarioMapper.BaseResultMap">
        <result column="project_name" property="projectName"/>
        <result column="user_name" property="userName"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>
    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and api_scenario.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and api_scenario.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and api_scenario.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and api_scenario.level
            <include refid="condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and api_scenario.user_id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "not like"'>
            and (api_scenario.tags is null or api_scenario.tags
                <include refid="condition">
                    <property name="object" value="${condition}.tags"/>
                </include>
            )
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "like"'>
            and api_scenario.tags
            <include refid="condition">
                <property name="object" value="${condition}.tags"/>
            </include>
        </if>

        <if test="${condition}.status != null">
            and api_scenario.last_result
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>

    </sql>
    <select id="listModule" resultType="java.lang.Integer">
        select count(id) from api_scenario
        <include refid="queryWhereCondition"/>
    </select>

    <select id="listModuleByCollection" resultType="java.util.Map">
        select api_scenario_module_id AS moduleId,count(id) AS countNum from api_scenario
        <include refid="queryWhereCondition"/>
        GROUP BY api_scenario_module_id
    </select>
    <select id="list" resultMap="BaseResultMap">
        select api_scenario.id, api_scenario.project_id, api_scenario.tags, api_scenario.user_id, api_scenario.num,
        api_scenario.custom_num, api_scenario.version,
        api_scenario.api_scenario_module_id,api_scenario.module_path, api_scenario.name, api_scenario.level,
        api_scenario.status, api_scenario.principal, api_scenario.step_total, api_scenario.follow_people,
        api_scenario.last_result,api_scenario.pass_rate,api_scenario.report_id,
        api_scenario.schedule, api_scenario.description, api_scenario.create_time, api_scenario.update_time,
        project.name as project_name, user.name as user_name,deleteUser.name AS delete_user,api_scenario.delete_time ,u2.name as principal_name
        from api_scenario
        left join project on api_scenario.project_id = project.id
        left join user on api_scenario.user_id = user.id
        left join user deleteUser on api_scenario.delete_user_id = deleteUser.id
        left join user u2 on api_scenario.principal = u2.id
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>

            <if test="request.name != null">
                and (api_scenario.name like CONCAT('%', #{request.name},'%')
                or api_scenario.tags like CONCAT('%', #{request.name},'%')
                or api_scenario.num like CONCAT('%', #{request.name},'%')
                or api_scenario.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.id != null">
                AND api_scenario.id = #{request.id}
            </if>
            <if test="request.userId != null">
                AND api_scenario.user_id = #{request.userId}
            </if>
            <if test="request.moduleId != null">
                AND api_scenario.api_scenario_module_id = #{request.moduleId}
            </if>
            <if test="request.projectId != null">
                AND api_scenario.project_id = #{request.projectId}
            </if>
            <if test="request.createTime >0 ">
                AND api_scenario.create_time >= #{request.createTime}
            </if>
            <if test="request.ids != null and request.ids.size() > 0">
                AND api_scenario.id in
                <foreach collection="request.ids" item="itemId" separator="," open="(" close=")">
                    #{itemId}
                </foreach>
            </if>
            <choose>
                <when test="request.moduleIds != null and request.moduleIds.size() > 0">
                    AND api_scenario.api_scenario_module_id in
                    <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                        #{nodeId}
                    </foreach>
                </when>
                <when test="request.projectId != null">
                    AND project.id = #{request.projectId}
                </when>
            </choose>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and api_scenario.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='user_id'">
                                and api_scenario.user_id in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='level'">
                                and api_scenario.level in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='last_result'">
                                and api_scenario.last_result in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='project_id'">
                                and api_scenario.project_id in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='principal'">
                                and api_scenario.principal in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>

                        </choose>
                    </if>
                </foreach>
            </if>
            <if test="request.executeStatus == 'unExecute'">
                and api_scenario.last_result IS NULL
            </if>
            <if test="request.executeStatus == 'executeFailed'">
                and api_scenario.last_result = 'Fail'
            </if>
            <if test="request.executeStatus == 'executePass'">
                and api_scenario.last_result = 'Success'
            </if>
            <if test="request.notInTestPlan == true ">
                and api_scenario.id not in (
                select pc.api_scenario_id
                from test_plan_api_scenario pc
                where pc.test_plan_id = #{request.planId}
                )
            </if>
        </where>
    </sql>

    <select id="selectByTagId" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
      select * from api_scenario where tags like CONCAT('%', #{id},'%')
    </select>

    <select id="selectIds" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        select * from api_scenario where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </select>

    <select id="listWithIds" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        select id from api_scenario where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </select>

    <select id="selectByNoReferenceId" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        select * from api_scenario where id not in
        (SELECT api_scenario_id FROM api_scenario_reference_id)
    </select>

    <select id="selectByIds" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        select * from api_scenario where id in (${ids}) ORDER BY FIND_IN_SET(id,${oderId})
    </select>

    <select id="selectReference" resultType="io.metersphere.base.domain.ApiScenario">
        select * from api_scenario
        <where>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                AND project_id = #{request.projectId}
            </if>
            <if test="request.moduleId != null">
                AND api_scenario_module_id = #{request.moduleId}
            </if>
            and scenario_definition like CONCAT('%', #{request.id},'%') and id != #{request.id}
        </where>
    </select>

    <update id="removeToGc">
        update api_scenario
        set original_state=status,
        status = 'Trash'
        where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>

    <update id="removeToGcByExample" parameterType="io.metersphere.base.domain.ApiScenarioExample">
        update api_scenario
        set original_state=status,
        status = 'Trash', delete_user_id = #{operator},delete_time = #{operationTime}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </update>

    <update id="reduction">
        update api_scenario
        set
        status = original_state, delete_user_id = null,delete_time = null
        where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>
    <update id="checkOriginalStatusByIds">
        update api_scenario
        set
        original_state = 'Underway'
        where (original_state IS NULL OR original_state = 'Trash') AND id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>
    <update id="updateCustomNumByProjectId">
        update api_scenario set custom_num = num where (custom_num is null or custom_num = '') and project_id = #{projectId}
    </update>

    <select id="countByProjectID" resultType="java.lang.Long">
        SELECT COUNT(id) AS countNumber FROM api_scenario WHERE project_id = #{0} AND status != 'Trash'
    </select>
    <select id="selectIdAndScenarioByProjectId" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        SELECT id,scenario_definition FROM api_scenario WHERE project_id = #{0} AND status != 'Trash'
    </select>
    <select id="selectIdAndUseUrlByProjectId" resultType="io.metersphere.base.domain.ApiScenarioWithBLOBs">
        SELECT id,use_url FROM api_scenario WHERE project_id = #{0} AND status != 'Trash'
    </select>
    <select id="countByProjectIDAndCreatInThisWeek" resultType="java.lang.Long">
        SELECT count(id) AS countNumber FROM api_scenario
        WHERE project_id = #{projectId}  AND status != 'Trash'
        AND create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>

    <select id="countRunResultByProjectID" resultType="io.metersphere.api.dto.datacount.ApiDataCountResult">
        SELECT count(id) AS countNumber, if(last_result is null,"notRun",last_result) AS groupField  FROM api_scenario
        WHERE project_id = #{0} AND status != 'Trash'
        GROUP BY groupField
    </select>

    <select id="selectIdsNotExistsInPlan" resultType="java.lang.String">
        select c.id
        from api_scenario c
        where c.project_id = #{projectId} and c.id not in (
          select pc.api_scenario_id
          from test_plan_api_scenario pc
          where pc.test_plan_id = #{planId}
        )
    </select>
    <select id="getNextNum" resultType="io.metersphere.base.domain.ApiScenario">
        SELECT * FROM api_scenario WHERE api_scenario.project_id = #{projectId} ORDER BY num DESC LIMIT 1;
    </select>

    <select id="selectIdsByQuery" resultType="java.lang.String">
        select api_scenario.id
        from api_scenario
        left join project on api_scenario.project_id = project.id
        <include refid="queryWhereCondition"/>
    </select>
    <select id="listReview" resultMap="BaseResultMap">
        select api_scenario.id, api_scenario.project_id, api_scenario.tags, api_scenario.user_id, api_scenario.num,
        api_scenario.api_scenario_module_id,api_scenario.module_path, api_scenario.name, api_scenario.level,
        api_scenario.status, api_scenario.principal, api_scenario.step_total, api_scenario.follow_people,
        api_scenario.last_result,api_scenario.pass_rate,api_scenario.report_id,
        api_scenario.schedule, api_scenario.description, api_scenario.create_time, api_scenario.update_time,
        project.name as project_name, user.name as user_name
        from api_scenario
        left join project on api_scenario.project_id = project.id
        left join user on api_scenario.user_id = user.id
        <include refid="queryWhereConditionReview"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <select id="selectIdsByUseUrlIsNull" resultType="java.lang.String">
        select id
        from api_scenario
        WHERE use_url IS NULL
    </select>
    <select id="selectTrash" resultType="java.lang.Integer">
        select count(1)
        from api_scenario
        where project_id = #{projectId}
          and status = 'Trash'
    </select>

    <select id="selectNameById" resultType="java.lang.String">
        select name
        from api_scenario
        WHERE id = #{0}
    </select>

    <select id="selectNameByIdIn" resultType="java.lang.String">
        select name
        from api_scenario
        WHERE id IN
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </select>
    <sql id="queryWhereConditionReview">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>

            <if test="request.name != null">
                and (api_scenario.name like CONCAT('%', #{request.name},'%')
                or api_scenario.tags like CONCAT('%', #{request.name},'%')
                or api_scenario.num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                AND project.id = #{request.projectId}
            </if>
            <if test="request.id != null">
                AND api_scenario.id = #{request.id}
            </if>
            <if test="request.userId != null">
                AND api_scenario.user_id = #{request.userId}
            </if>
            <if test="request.moduleId != null">
                AND api_scenario.api_scenario_module_id = #{request.moduleId}
            </if>
            <if test="request.projectId != null">
                AND api_scenario.project_id = #{request.projectId}
            </if>
            <if test="request.createTime >0 ">
                AND api_scenario.create_time >= #{request.createTime}
            </if>
            <if test="request.ids != null and request.ids.size() > 0">
                AND api_scenario.id in
                <foreach collection="request.ids" item="itemId" separator="," open="(" close=")">
                    #{itemId}
                </foreach>
            </if>
            <if test="request.moduleIds != null and request.moduleIds.size() > 0">
                AND api_scenario.api_scenario_module_id in
                <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and api_scenario.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='user_id'">
                                and api_scenario.user_id in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='level'">
                                and api_scenario.level in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='last_result'">
                                and api_scenario.last_result in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
            <if test="request.executeStatus == 'unExecute'">
                and api_scenario.last_result IS NULL
            </if>
            <if test="request.executeStatus == 'executeFailed'">
                and api_scenario.last_result = 'Fail'
            </if>
            <if test="request.executeStatus == 'executePass'">
                and api_scenario.last_result = 'Success'
            </if>
            <if test="request.notInTestPlan == true ">
                and api_scenario.id not in (
                select pc.api_scenario_id
                from test_case_review_scenario pc
                where pc.test_case_review_id = #{request.reviewId}
                )
            </if>
        </where>
    </sql>

</mapper>

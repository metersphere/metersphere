<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestCaseMapper">

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.method != null">
            and test_case.method
            <include refid="condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.maintainer
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>


    <select id="getTestCaseNames" resultType="io.metersphere.base.domain.TestCase">
        select test_case.id, test_case.name, test_case.priority, test_case.type, test_case.review_status
        from test_case
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and test_case.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.projectId != null">
                AND test_case.project_id = #{request.projectId}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                AND test_case.node_id IN
                <foreach collection="request.nodeIds" open="(" close=")" separator="," item="nodeId">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='priority'">
                                and test_case.priority in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='status'">
                                and test_case.review_status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and test_case.type in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
        ORDER BY test_case.update_time DESC
    </select>

    <select id="list" resultType="io.metersphere.track.dto.TestCaseDTO">
        select test_case.* from test_case
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%') or test_case.num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.projectId != null">
                and test_case.project_id = #{request.projectId}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='priority'">
                                and test_case.priority in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='type'">
                                and test_case.type in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='status'">
                                and test_case.review_status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and test_case.method in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>
    <select id="listByMethod" resultType="io.metersphere.track.dto.TestCaseDTO">
        SELECT id,name,status,project_id,"api" as type from api_test
        <where>
            <if test="request.projectId!=null">
                and project_id=#{request.projectId}
            </if>
        </where>
        UNION ALL
        select id,name,status,project_id,"perform" as type from load_test
        <where>
            <if test="request.projectId!=null">
                and project_id= #{request.projectId}
            </if>
        </where>
    </select>
    <select id="listByTestCaseIds" resultType="io.metersphere.track.dto.TestCaseDTO">
        select test_case.*,api_test.name as apiName,load_test.name AS performName from test_case left join api_test on
        test_case.test_id=api_test.id left join load_test on test_case.test_id=load_test.id
        <where>
            <if test="request.ids!=null and request.ids.size() > 0">
                and test_case.id in
                <foreach collection="request.ids" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
            <if test="request.projectId!=null">
                and test_case.project_id=#{request.projectId}
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="getMaxNumByProjectId" resultType="io.metersphere.base.domain.TestCase">
        select * from test_case where test_case.project_id = #{projectId} order by num desc limit 1;
    </select>
    <select id="checkIsHave" resultType="java.lang.String">
        select distinct test_case.id
        from test_case, project
        where test_case.project_id = project.id
        and project.workspace_id = #{workspaceId}
        and test_case.id = #{caseId};
    </select>
</mapper>
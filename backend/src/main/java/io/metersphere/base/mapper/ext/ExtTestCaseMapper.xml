<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestCaseMapper">

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.method != null">
            and test_case.method
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.maintainer
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "not like"'>
            and (test_case.tags is null or test_case.tags
                <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                    <property name="object" value="${condition}.tags"/>
                </include>
            )
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "like"'>
            and test_case.tags
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.tags"/>
            </include>
        </if>
        <if test="${condition}.reviewStatus != null">
            and test_case.review_status
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.reviewStatus"/>
            </include>
        </if>
    </sql>
    <update id="updateTestCaseCustomNumByProjectId">
        update test_case set custom_num = num where (custom_num is null or custom_num = '') and project_id = #{projectId}
    </update>

    <select id="getTestCaseByNotInReview" resultType="io.metersphere.base.domain.TestCase">
        select test_case.id, test_case.name, test_case.priority, test_case.type, test_case.review_status from test_case
        as test_case
        left join test_case_review_test_case as T2 on test_case.id=T2.case_id and T2.review_id =#{request.reviewId}
        <include refid="notInQueryWhereCondition"/>
        and T2.case_id is null
        ORDER BY test_case.update_time DESC
    </select>

    <sql id="notInQueryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.testCaseContainIds != null and request.testCaseContainIds.size() > 0">
                and test_case.id not in
                <foreach collection="request.testCaseContainIds" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.name != null">
                and test_case.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.projectId != null">
                AND test_case.project_id = #{request.projectId}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                AND test_case.node_id IN
                <foreach collection="request.nodeIds" open="(" close=")" separator="," item="nodeId">
                    #{nodeId}
                </foreach>
            </if>
            <include refid="filters"/>
        </where>
    </sql>

    <select id="getTestCaseByNotInPlan" resultType="io.metersphere.base.domain.TestCase">
        select test_case.id, test_case.name, test_case.priority, test_case.type, test_case.review_status,
        test_case.num, test_case.custom_num, test_case.priority, test_case.tags, test_case.create_time, test_case.update_time
        from test_case as test_case
        left join test_plan_test_case as T2 on test_case.id=T2.case_id and T2.plan_id =#{request.planId}
        <include refid="notInQueryWhereCondition"></include>
        and T2.case_id is null
        ORDER BY test_case.update_time DESC
    </select>

    <select id="getTestCaseNames" resultType="io.metersphere.base.domain.TestCase">
        select test_case.id, test_case.name, test_case.priority, test_case.type, test_case.review_status,test_case.num,test_case.custom_num
        from test_case
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.name != null">
                and test_case.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.projectId != null">
                AND test_case.project_id = #{request.projectId}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                AND test_case.node_id IN
                <foreach collection="request.nodeIds" open="(" close=")" separator="," item="nodeId">
                    #{nodeId}
                </foreach>
            </if>
            <include refid="filters"/>
        </where>
        ORDER BY test_case.update_time DESC
    </select>

    <select id="list" resultType="io.metersphere.track.dto.TestCaseDTO">
        select
        deleteUser.name AS delete_user_id,test_case.delete_time,
        <if test="request.selectFields != null and request.selectFields.size() > 0">
            <foreach collection="request.selectFields" item="field" separator=",">
                ${field}
            </foreach>
        </if>
        <if test="request.selectFields == null or request.selectFields.size() == 0">
            test_case.id, test_case.node_id, test_case.node_path, test_case.project_id, test_case.`name`,
            test_case.`type`, test_case.maintainer, test_case.priority, test_case.`method`,
            test_case.create_time, test_case.update_time, test_case.test_id, test_case.sort, test_case.num,
            test_case.other_test_name, test_case.review_status, test_case.tags,
            test_case.demand_id, test_case.demand_name, test_case.follow_people, test_case.`status`,
            test_case.custom_num, test_case.step_model, test_case.create_user,u.name as createName,
            test_case.custom_fields
        </if>
        from test_case left join user u on test_case.create_user=u.id
        left join user deleteUser on test_case.delete_user_id=deleteUser.id
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>
    <select id="moduleCount" resultType="java.lang.Integer">
        select count(id) from test_case
        <include refid="queryWhereCondition"/>
    </select>

    <select id="moduleCountByCollection" resultType="java.util.Map">
        select node_id AS moduleId,count(id) AS countNum from test_case
        <include refid="queryWhereCondition"/>
        GROUP BY node_id
    </select>
    <select id="listIds" resultType="io.metersphere.track.dto.TestCaseDTO">
        select
        <if test="request.selectFields != null and request.selectFields.size() > 0">
            <foreach collection="request.selectFields" item="field" separator=",">
                ${field}
            </foreach>
        </if>
        <if test="request.selectFields == null or request.selectFields.size() == 0">
            <include refid="io.metersphere.base.mapper.TestCaseMapper.Base_Column_List"/>
        </if>
        from test_case
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>
    <select id="listByMethod" resultType="io.metersphere.track.dto.TestCaseDTO">
        SELECT id,name,project_id,"api" as type from api_test
        <where>
            <if test="request.projectId!=null">
                and project_id=#{request.projectId}
            </if>
        </where>
        UNION ALL
        select id,name,project_id,"perform" as type from load_test
        <where>
            <if test="request.projectId!=null">
                and project_id= #{request.projectId}
            </if>
        </where>
        UNION ALL
        select id,name,project_id,"scenario" as type from api_scenario

        <where>
            <if test="request.projectId!=null">
                and project_id= #{request.projectId}
            </if>
        </where>
        and api_scenario.status!='Trash'
        UNION ALL
        select b.id,b.name,b.project_id,"definition" as type from api_test_case b
        inner join
        api_definition a
        on
        b.api_definition_id = a.id
        and a.status != 'Trash'
        <where>
            <if test="request.projectId!=null">
                and b.project_id= #{request.projectId}
            </if>
        </where>
    </select>
    <select id="listByTestCaseIds" resultType="io.metersphere.track.dto.TestCaseDTO">
        select test_case.*,api_test.name as apiName,load_test.name AS performName from test_case left join api_test on
        test_case.test_id=api_test.id left join load_test on test_case.test_id=load_test.id
        <where>
            <if test="request.ids!=null and request.ids.size() > 0">
                and test_case.id in
                <foreach collection="request.ids" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
            <if test="request.projectId!=null">
                and test_case.project_id=#{request.projectId}
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="getMaxNumByProjectId" resultType="io.metersphere.base.domain.TestCase">
        SELECT *
        FROM test_case
        WHERE test_case.project_id = #{projectId}
        ORDER BY num DESC
        LIMIT 1;
    </select>

    <select id="checkIsHave" resultType="int">
        SELECT COUNT(1)
        FROM test_case, project
        WHERE test_case.project_id = project.id
        <if test="projectIds != null and projectIds.size() > 0">
            AND project.id IN
            <foreach collection="projectIds" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        </if>
        AND test_case.id = #{caseId}
    </select>

    <select id="selectIds" resultType="java.lang.String">
        select
        id
        from test_case
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <sql id="filters">
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='priority'">
                            and test_case.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='type'">
                            and test_case.type in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='review_status'">
                            and test_case.review_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='status'">
                            and test_case.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='method'">
                            and test_case.method in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                    </choose>
                </if>
                <if test="key=='status' and values.size == 0">
                    and (test_case.status is null or test_case.status != 'Trash')
                </if>
            </foreach>
        </if>
        <if test="request.filters == null || request.filters.size() == 0 ">
            and (test_case.status is null or test_case.status != 'Trash')
        </if>
    </sql>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.ids != null">
                and test_case.id in
                <foreach collection="request.ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="request.relevanceCreateTime >0">
                and test_case.id in (select test_case_id from test_case_test where test_case_test.create_time >=
                #{request.createTime})
            </if>
            <if test="request.createTime >0">
                and test_case.create_time >= #{request.createTime}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.projectId != null">
                and test_case.project_id = #{request.projectId}
            </if>
            <include refid="filters"/>
            <if test="request.caseCoverage == 'uncoverage' ">
                and test_case.id not in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
            <if test="request.caseCoverage == 'coverage' ">
                and test_case.id in (select distinct test_case_test.test_case_id from test_case_test)
            </if>
        </where>
    </sql>

    <select id="countPriority" resultType="io.metersphere.track.response.TrackCountResult">
        SELECT test_case.priority as groupField,count(id) AS countNumber FROM test_case WHERE project_id = #{projectId} GROUP BY test_case.priority
    </select>

    <!-- todo 排除删除的用例统计-->
    <select id="countCreatedThisWeek" resultType="java.lang.Long">
        SELECT count(id) AS countNumber FROM test_case WHERE test_case.project_id = #{projectId}
          AND create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>
    <!-- todo 排除删除的用例统计-->
    <select id="countStatus" resultType="io.metersphere.track.response.TrackCountResult">
        SELECT review_status AS groupField,count(id) AS countNumber FROM test_case  WHERE project_id = #{projectId} GROUP BY test_case.review_status
    </select>

    <select id="countRelevance" resultType="io.metersphere.track.response.TrackCountResult">
        SELECT test_case_test.test_type AS groupField, count(test_case_test.test_case_id) AS countNumber
        FROM test_case join test_case_test on test_case.id = test_case_test.test_case_id
        WHERE test_case.project_id = #{projectId} GROUP BY test_case_test.test_type
    </select>
    <select id="countRelevanceCreatedThisWeek" resultType="java.lang.Long">
        SELECT count(distinct test_case_test.test_case_id) AS countNumber FROM test_case join test_case_test on test_case.id = test_case_test.test_case_id
        WHERE test_case.project_id = #{projectId}
        AND test_case_test.create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>

    <select id="countCoverage" resultType="int">
        select count(test_case.id) from test_case where test_case.project_id = #{projectId}
        and test_case.id in (select distinct test_case_test.test_case_id from test_case_test)
    </select>
    <select id="countFuncMaintainer" resultType="io.metersphere.track.response.TrackCountResult">
        select count(tc.id) as countNumber, user.name as groupField from test_case tc right join user on tc.maintainer = user.id
        where tc.project_id = #{projectId}
        group by tc.maintainer
    </select>
    <select id="countRelevanceMaintainer" resultType="io.metersphere.track.response.TrackCountResult">
        select count(tc.id) as countNumber, user.name as groupField from test_case tc right join user on tc.maintainer = user.id
        where tc.project_id = #{projectId} and tc.id in (select distinct test_case_test.test_case_id from test_case_test)
        group by tc.maintainer
    </select>
    <select id="getTestPlanBug" resultType="int">
        select count(tci.issues_id) from test_plan_test_case tptc join test_case_issues tci on tptc.case_id = tci.test_case_id
        where tptc.plan_id = #{planId};
    </select>
    <select id="getTestPlanCase" resultType="int">
        select count(s)
        from (
                 select tptc.id as s
                 from test_plan_test_case tptc join test_case on tptc.case_id = test_case.id
                 where tptc.plan_id = #{planId}
                 union all
                 select tpas.id as s
                 from test_plan_api_scenario tpas join api_scenario on tpas.api_scenario_id = api_scenario.id
                 where tpas.test_plan_id = #{planId} and api_scenario.status != 'Trash'
                 union all
                 select tpac.id as s
                 from test_plan_api_case tpac join api_test_case on tpac.api_case_id = api_test_case.id
                                              join api_definition on api_test_case.api_definition_id = api_definition.id
                 where tpac.test_plan_id = #{planId} and api_definition.status != 'Trash'
                 union all
                 select tplc.id as s
                 from test_plan_load_case tplc join load_test on tplc.load_case_id = load_test.id
                 where tplc.test_plan_id = #{planId}
             ) as temp
    </select>
    <select id="getTestPlanPassCase" resultType="int">
        select count(s)
        from (
                 select id as s
                 from test_plan_test_case tptc
                 where tptc.plan_id = #{planId} and tptc.status = 'Pass'
                 union all
                 select id as s
                 from test_plan_api_scenario tpas
                 where tpas.test_plan_id = #{planId} and tpas.last_result = 'Success'
                 union all
                 select id as s
                 from test_plan_api_case tpac
                 where tpac.test_plan_id = #{planId} and tpac.status = 'success'
                 union all
                 select id as s
                 from test_plan_load_case tplc
                 where tplc.test_plan_id = #{planId} and tplc.status = 'success'
             ) as temp
    </select>

    <select id="listForMinder" resultType="io.metersphere.base.domain.TestCaseWithBLOBs">
        select
        <include refid="io.metersphere.base.mapper.TestCaseMapper.Base_Column_List"/>,
        <include refid="io.metersphere.base.mapper.TestCaseMapper.Blob_Column_List"/>
        from test_case
        <include refid="queryWhereCondition"/>
        <if test="request.nodeId != null">
            and test_case.node_id = #{request.nodeId}
        </if>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>
    <select id="getTestCaseByNotInIssue" resultType="io.metersphere.track.dto.TestCaseDTO">
        select
        <include refid="io.metersphere.base.mapper.TestCaseMapper.Base_Column_List"/>
        from test_case
        <include refid="notInQueryWhereCondition"></include>
    </select>
    <select id="getTestCaseByIds" resultType="io.metersphere.track.dto.TestCaseDTO">
        select
        <include refid="io.metersphere.base.mapper.TestCaseMapper.Base_Column_List"/>
        from test_case
        <where>
            test_case.id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        </where>
    </select>
    <select id="selectRelateIdsByQuery" resultType="java.lang.String">
        select test_case.id as id
        from test_case as test_case
        left join test_plan_test_case as T2 on test_case.id=T2.case_id and T2.plan_id =#{request.planId}
        <include refid="notInQueryWhereCondition"/>
        and T2.case_id is null
    </select>
    <select id="getCustomFieldsByIds" resultType="io.metersphere.base.domain.TestCaseWithBLOBs">
        select id, custom_fields
        from test_case
        <where>
            test_case.id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        </where>
    </select>

    <select id="selectIdsByNodeIds" resultType="java.lang.String">
        select id
        from test_case
        <where>
            node_id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        </where>
    </select>

    <update id="deleteToGc">
        update test_case set original_status=status,
        status = 'Trash',
        delete_time = #{request.deleteTime},
        delete_user_id = #{request.deleteUserId}
        where id = #{request.id}
    </update>
    <update id="reduction">
        update test_case
        set
        status = original_status,
        delete_user_id = null,
        delete_time = null
        where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>
    <update id="checkOriginalStatusByIds">
        update test_case
        set
        original_status = 'Underway'
        where (original_status IS NULL OR original_status = 'Trash') AND id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </update>

</mapper>

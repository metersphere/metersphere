<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestPlanTestCaseMapper">
    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.method != null">
            and test_case.method
            <include refid="condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.maintainer
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="getReportMetric" parameterType="java.lang.String"
            resultType="io.metersphere.track.dto.TestCaseReportStatusResultDTO">
        select count(t1.id) as `count`, t1.status
        from test_plan_test_case t1
        inner join test_case t2
        where t1.case_id = t2.id
        and plan_id = #{planId}
        group by t1.status;
    </select>

    <select id="getExecutors" resultType="java.lang.String" parameterType="java.lang.String">
        select distinct t1.executor
        from test_plan_test_case t1
        inner join test_case t2
        where t1.case_id = t2.id
        and plan_id = #{planId};
    </select>

    <select id="list" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_case.remark, test_plan_test_case.id as id, test_plan_test_case.*,test_case.*,test_case_node.name as model, project.name as projectName
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id=test_case.node_id
        inner join project on project.id = test_case.project_id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%') or test_case.num like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.id != null">
                and test_case.id = #{request.id}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.status != null">
                and test_plan_test_case.status = #{request.status}
            </if>
            <if test="request.executor != null">
                and test_plan_test_case.executor = #{request.executor}
            </if>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='priority'">
                                and test_case.priority in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='type'">
                                and test_case.type in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key=='method'">
                                and test_case.method in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and test_plan_test_case.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'num'">
                        test_case.num ${order.type}
                    </when>
                    <otherwise>
                        test_plan_test_case.${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="listByNode" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        <where>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>

            <if test="request.nodePaths != null and request.nodePaths.size() > 0">
                and test_case.node_path in
                <foreach collection="request.nodePaths" item="nodePaths" separator="," open="(" close=")">
                    #{nodePaths}
                </foreach>
            </if>

        </where>

    </select>
    <select id="listByNodes" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        <where>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>
            <if test="request.nodePaths != null and request.nodePaths.size() > 0">
                and
                <foreach collection="request.nodePaths" item="nodePaths" separator="or" index="index">
                    test_case.node_path like concat('%',#{nodePaths},'%')
                </foreach>
            </if>

        </where>

    </select>

    <select id="findRelateTestPlanId" resultType="java.lang.String">
        select distinct plan_id from test_plan_test_case
        inner join test_plan
        on test_plan_test_case.plan_id = test_plan.id
        where test_plan_test_case.executor = #{userId}
        and test_plan.workspace_id = #{workspaceId}
    </select>
    <select id="getRecentTestedTestCase" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        where status != 'Prepare'
        and status != 'Underway'
        and test_plan_test_case.Executor = #{request.executor}
        and test_plan_test_case.plan_id in
        <foreach collection="request.planIds" item="planId" separator="," open="(" close=")">
            #{planId}
        </foreach>
        order by test_plan_test_case.update_time desc
    </select>
    <select id="getPendingTestCases" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        where (status = 'Prepare' or status = 'Underway')
        and test_plan_test_case.Executor = #{request.executor}
        and test_plan_test_case.plan_id in
        <foreach collection="request.planIds" item="planId" separator="," open="(" close=")">
            #{planId}
        </foreach>
        order by test_plan_test_case.update_time asc
    </select>
    <select id="getStatusByPlanId" resultType="java.lang.String">
        select status
        from test_plan_test_case
        where plan_id = #{planId}
    </select>
</mapper>
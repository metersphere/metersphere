<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestPlanTestCaseMapper">
    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="condition">
                <property name="object" value="${condition}.type"/>
            </include>
            test_case_review_users
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.method != null">
            and test_case.method
            <include refid="condition">
                <property name="object" value="${condition}.method"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.maintainer
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test="${condition}.executor != null">
            and test_plan_test_case.executor
            <include refid="condition">
                <property name="object" value="${condition}.executor"/>
            </include>
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "not like"'>
            and (test_case.tags is null or test_case.tags
            <include refid="condition">
                <property name="object" value="${condition}.tags"/>
            </include>
            )
        </if>
        <if test='${condition}.tags != null and ${objectKey}.operator == "like"'>
            and test_case.tags
            <include refid="condition">
                <property name="object" value="${condition}.tags"/>
            </include>
        </if>

    </sql>

    <select id="getReportMetric" parameterType="java.lang.String"
            resultType="io.metersphere.track.dto.TestCaseReportStatusResultDTO">
        select count(t1.id) as `count`, t1.status
        from test_plan_test_case t1
                 inner join test_case t2
        where t1.case_id = t2.id
          and plan_id = #{planId}
        group by t1.status;
    </select>

    <select id="getExecutors" resultType="java.lang.String" parameterType="java.lang.String">
        select distinct t1.executor
        from test_plan_test_case t1
                 inner join test_case t2
        where t1.case_id = t2.id
          and plan_id = #{planId};
    </select>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%',#{request.name},'%')
                or test_case.custom_num like CONCAT('%',#{request.name},'%')
                or test_case.tags like CONCAT('%', #{request.name},'%'))
            </if>
            <if test="request.id != null">
                and test_case.id = #{request.id}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.status != null">
                and test_plan_test_case.status = #{request.status}
            </if>
            <if test="request.executor != null">
                and test_plan_test_case.executor = #{request.executor}
            </if>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>
            <include refid="filter"/>
        </where>
    </sql>

    <sql id="filter">
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='priority'">
                            and test_case.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='type'">
                            and test_case.type in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='method'">
                            and test_case.method in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='maintainer'">
                            and test_case.maintainer in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='executor'">
                            and test_plan_test_case.executor in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <otherwise>
                            and test_plan_test_case.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </otherwise>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <select id="list" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.id as id, test_case.id as caseId, test_case.name, test_case.priority,
        test_case.type,test_case.test_id as testId,test_case.node_id, test_case.tags, test_case.maintainer,
        test_case.custom_fields,
        test_case.node_path, test_case.method, if(project.custom_num = 0, cast(test_case.num as char),
        test_case.custom_num) as customNum, test_plan_test_case.executor, test_plan_test_case.status,
        test_plan_test_case.actual_result,
        test_plan_test_case.update_time, test_plan_test_case.create_time,test_case_node.name as model, project.name as
        projectName,test_plan_test_case.issues as issues,test_plan_test_case.issues_count as issuesCount,
        test_plan_test_case.plan_id as planId
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id = test_case.node_id
        inner join project on project.id = test_case.project_id
        <include refid="queryWhereCondition"/>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'custom_num'">
                     customNum ${order.type}
                    </when>
                    <otherwise>
                     ${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <select id="selectIds" resultType="java.lang.String">
        select distinct test_plan_test_case.id as id
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id = test_case.node_id
        inner join project on project.id = test_case.project_id
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <select id="listTestCaseByProjectIds" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select distinct * from test_plan_test_case, test_case
        where test_plan_test_case.case_id = test_case.id
        and test_case.project_id in
        <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="listByNode" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        <where>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>

            <if test="request.nodePaths != null and request.nodePaths.size() > 0">
                and test_case.node_path in
                <foreach collection="request.nodePaths" item="nodePaths" separator="," open="(" close=")">
                    #{nodePaths}
                </foreach>
            </if>

        </where>

    </select>
    <select id="listByNodes" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        <where>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>
            <if test="request.nodePaths != null and request.nodePaths.size() > 0">
                and
                <foreach collection="request.nodePaths" item="nodePaths" separator="or" index="index">
                    test_case.node_path like concat('%',#{nodePaths},'%')
                </foreach>
            </if>

        </where>

    </select>

    <select id="findRelateTestPlanId" resultType="java.lang.String">
        select distinct plan_id from test_plan_test_case
        inner join test_plan
        on test_plan_test_case.plan_id = test_plan.id
        <where>
            test_plan_test_case.executor = #{userId}
            and test_plan.workspace_id = #{workspaceId}
            <if test="projectId != null">
                and test_plan.project_id = #{projectId}
            </if>
        </where>
    </select>
    <select id="getRecentTestedTestCase" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        where test_plan_test_case.status != 'Prepare'
        and test_plan_test_case.status != 'Underway'
        and test_plan_test_case.Executor = #{request.executor}
        and test_plan_test_case.plan_id in
        <foreach collection="request.planIds" item="planId" separator="," open="(" close=")">
            #{planId}
        </foreach>
        order by test_plan_test_case.update_time desc
    </select>
    <select id="getPendingTestCases" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_plan_test_case.*, test_case.*
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        where (status = 'Prepare' or status = 'Underway')
        and test_plan_test_case.Executor = #{request.executor}
        and test_plan_test_case.plan_id in
        <foreach collection="request.planIds" item="planId" separator="," open="(" close=")">
            #{planId}
        </foreach>
        order by test_plan_test_case.update_time asc
    </select>
    <select id="getStatusByPlanId" resultType="java.lang.String">
        select status
        from test_plan_test_case
        where plan_id = #{planId}
    </select>
    <select id="getTestPlanTestCaseIds" resultType="java.lang.String">
        select c.id from test_case a left join test_plan_test_case c on a.id=c.case_id
        <where>
            <if test="testId!=null">
                and a.test_id=#{testId}
            </if>
        </where>
    </select>

    <select id="get" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select test_case.remark,
               test_plan_test_case.id as id,
               test_plan_test_case.*,
               test_case.*,
               test_case_node.name    as model,
               project.name           as projectName
        from test_plan_test_case
                 inner join test_case on test_plan_test_case.case_id = test_case.id
                 left join test_case_node on test_case_node.id = test_case.node_id
                 inner join project on project.id = test_case.project_id
        where test_plan_test_case.id = #{testPlanTestCaseId}
    </select>

    <select id="getExecResultByPlanId" resultType="java.lang.String">
        select status
        from test_plan_test_case
        where plan_id = #{planId}
    </select>
    <select id="listByPlanId" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        SELECT test_plan_api_case.id as reportId,test_plan_api_case.api_case_id as id,"definition" as
        type,api_test_case.name,test_plan_api_case.status
        from test_plan_api_case left join api_test_case on test_plan_api_case.api_case_id=api_test_case.id
        inner join
        api_definition a
        on
        api_test_case.api_definition_id = a.id
        and a.status != 'Trash'
        <where>
            <if test="request.planId != null">
                and test_plan_api_case.test_plan_id = #{request.planId}
            </if>
        </where>
        UNION ALL
        SELECT test_plan_api_scenario.api_scenario_id as testId,test_plan_api_scenario.id as id,"scenario" as
        type,api_scenario.name,test_plan_api_scenario.status
        from test_plan_api_scenario
        left join
        api_scenario
        on
        test_plan_api_scenario.api_scenario_id=api_scenario.id
        and api_scenario.status != 'Trash'
        <where>
            <if test="request.planId != null">
                and test_plan_api_scenario.test_plan_id = #{request.planId}
            </if>
        </where>
        UNION ALL
        select test_plan_load_case.id as reportId,load_test.id as id,"perform" as type,load_test.name as
        name,test_plan_load_case.status from test_plan_load_case inner join
        load_test on
        test_plan_load_case.load_case_id =load_test.id
        <where>
            <if test="request.planId != null">
                and test_plan_load_case.test_plan_id = #{request.planId}
            </if>
        </where>
        UNION ALL
        SELECT test_case.id as reportId,test_case.test_id as id,test_case.type as
        type,test_case.name,test_plan_test_case.status
        from test_plan_test_case left join test_case on test_plan_test_case.case_id =test_case.id
        <where>
            <if test="request.planId != null">
                and test_plan_test_case.plan_id = #{request.planId}
            </if>
            <if test="request.method != null">
                and test_case.method = #{request.method}
            </if>
        </where>
    </select>

    <select id="listForMinder" resultType="io.metersphere.track.dto.TestPlanCaseDTO">
        select pc.id as id,
               pc.executor, pc.status,
               pc.update_time,
               pc.plan_id as planId,
               t.name, t.priority,
               t.type, t.node_id,
               t.steps, t.prerequisite,
               t.remark,
               t.node_path, t.method, t.num, t.step_model, t.expected_result, t.step_description
        from test_plan_test_case pc
        inner join test_case t on pc.case_id = t.id
        <where>
            pc.plan_id = #{request.planId}
            and t.node_id = #{request.nodeId}
        </where>
        order by pc.update_time desc;
    </select>
    <select id="listTestCaseTest" resultType="io.metersphere.track.dto.TestCaseTestDTO">
        select * from test_case_test where test_case_id = #{caseId};
    </select>
    <select id="selectIdsByQuery" resultType="java.lang.String">
        select test_plan_test_case.id
        from test_plan_test_case
        inner join test_case on test_plan_test_case.case_id = test_case.id
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>
    <update id="updateTestCaseStates" parameterType="java.lang.String">
        update test_plan_test_case
        <set>
            <if test="reportStatus!=null">
                status=#{reportStatus,jdbcType=VARCHAR}
            </if>
        </set>
        where id in
        <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>
    <update id="update">
        update test_plan_test_case
        <set>
            issues_count=#{count},
            issues = #{issues}
        </set>
        where
        case_id=#{caseId,jdbcType=VARCHAR}
        <if test="id != null and id != ''">
            and plan_id=#{id,jdbcType=VARCHAR}
        </if>

    </update>


    <delete id="deleteByTestCaseID" parameterType="java.lang.String">
        delete
        from test_plan_api_case
        where api_case_id = #{id,jdbcType=VARCHAR}
    </delete>
</mapper>

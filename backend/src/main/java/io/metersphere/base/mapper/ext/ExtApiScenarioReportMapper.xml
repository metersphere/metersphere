<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtApiScenarioReportMapper">

    <resultMap id="BaseResultMap" type="io.metersphere.api.dto.automation.APIScenarioReportResult"
               extends="io.metersphere.base.mapper.ApiScenarioReportMapper.BaseResultMap">
        <result column="test_name" property="testName"/>
        <result column="project_name" property="projectName"/>
        <result column="user_name" property="userName"/>
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and r.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.testName != null">
            and t.name
            <include refid="condition">
                <property name="object" value="${condition}.testName"/>
            </include>
        </if>
        <if test="${condition}.projectName != null">
            and project.name
            <include refid="condition">
                <property name="object" value="${condition}.projectName"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and r.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and r.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
        <if test="${condition}.triggerMode != null">
            and r.trigger_mode
            <include refid="condition">
                <property name="object" value="${condition}.triggerMode"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and r.user_id
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="list" resultMap="BaseResultMap">
        SELECT r.name AS test_name,
        r.name, r.description, r.id, r.project_id, r.create_time, r.update_time, r.status, r.trigger_mode,IfNULL(s.name,r.scenario_name) as scenario_name,
        project.name AS project_name, user.name AS user_name
        FROM api_scenario_report r
        LEFT JOIN api_scenario s on r.scenario_id = s.id
        LEFT JOIN project ON project.id = r.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null">
                and r.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.userId != null">
                AND r.user_id = #{request.userId,jdbcType=VARCHAR}
            </if>
            <if test="request.projectId != null">
                AND project.id = #{request.projectId}
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId,jdbcType=VARCHAR}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and r.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and r.trigger_mode in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
            AND r.execute_type = 'Saved'
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                r.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="idList" resultType="java.lang.String">
        SELECT r.id
        FROM api_scenario_report r
        LEFT JOIN api_scenario s on r.scenario_id = s.id
        LEFT JOIN project ON project.id = r.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null">
                and r.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.userId != null">
                AND r.user_id = #{request.userId,jdbcType=VARCHAR}
            </if>
            <if test="request.projectId != null">
                AND project.id = #{request.projectId}
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId,jdbcType=VARCHAR}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and r.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <otherwise>
                                and r.trigger_mode in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </otherwise>
                        </choose>
                    </if>
                </foreach>
            </if>
            AND r.execute_type = 'Saved'
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                r.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="get" resultType="io.metersphere.api.dto.automation.APIScenarioReportResult">
        SELECT r.*,r.id As testId, r.name AS test_name, project.name AS project_name, user.name AS user_name
        FROM api_scenario_report r
        LEFT JOIN project ON project.id = r.project_id
        LEFT JOIN user ON user.id = r.user_id
        <where>
            r.id = #{reportId}
        </where>
        ORDER BY r.update_time DESC
    </select>

    <select id="countByProjectID" resultType="java.lang.Long">
        SELECT count(id) AS countNumber FROM api_scenario_report WHERE project_id = #{0}
    </select>
    <select id="countByProjectIdAndCreateInThisWeek" resultType="java.lang.Long">
        SELECT count(id) AS countNumber FROM api_scenario_report
        WHERE project_id = #{projectId}
        AND create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>

    <select id="countByProjectIdAndCreateAndByScheduleInThisWeek" resultType="java.lang.Long">
        SELECT count(acr.report_id) AS countNumber FROM api_scenario_report_detail acr
        INNER JOIN api_scenario_report ar ON ar.id = acr.report_id
        INNER JOIN (
            SELECT acitem.`name`,acitem.id FROM api_scenario acitem INNER JOIN `schedule` sc ON acitem.id = sc.resource_id
        ) ac on ar.scenario_id = ac.id
        WHERE acr.project_id = #{projectId} AND ar.trigger_mode = 'SCHEDULE' AND ar.create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>

    <select id="countByProjectIdGroupByExecuteResult" resultType="io.metersphere.api.dto.datacount.ApiDataCountResult">
        SELECT count(acr.report_id) AS countNumber,ar.status AS groupField
        FROM api_scenario_report_detail acr
        INNER JOIN api_scenario_report ar ON ar.id = acr.report_id
        INNER JOIN (
        SELECT acitem.`name`,acitem.id FROM api_scenario acitem INNER JOIN `schedule` sc ON acitem.id = sc.resource_id
        ) ac on ar.scenario_id = ac.id
        WHERE acr.project_id = #{projectId} AND ar.trigger_mode = 'SCHEDULE'
        GROUP BY groupField;
    </select>
    <select id="selectLastReportByIds" resultType="io.metersphere.base.domain.ApiScenarioReport">
        SELECT report.* FROM api_scenario_report report
        INNER JOIN (
        SELECT a.id,a.createTime,a.scenario_id FROM
        (
        SELECT id AS id,create_time AS createTime, scenario_id AS scenario_id FROM api_scenario_report
        WHERE execute_type = 'Saved' AND scenario_id in
        <foreach collection="scenarioIdList" item="value" separator="," open="(" close=")">
                        #{value}
                    </foreach>
        UNION
        SELECT report.id AS id,report.create_time AS createTime,planScenario.api_scenario_id AS scenario_id FROM
        api_scenario_report report
        INNER JOIN test_plan_api_scenario planScenario ON report.scenario_id = planScenario.id
        WHERE report.execute_type = 'Saved' AND planScenario.api_scenario_id in
        <foreach collection="scenarioIdList" item="value" separator="," open="(" close=")">
                        #{value}
                    </foreach>
                ORDER BY createTime DESC
            ) a GROUP BY a.scenario_id
        ) orderData ON orderData.id = report.id;
    </select>

    <select id="selectPreviousReportByScenarioId" resultType="io.metersphere.base.domain.ApiScenarioReport">
          select * from api_scenario_report
            WHERE execute_type in ("Completed","Debug")  and scenario_id=#{scenarioId} and id != #{nowId} ORDER BY create_time desc LIMIT 1
    </select>

</mapper>
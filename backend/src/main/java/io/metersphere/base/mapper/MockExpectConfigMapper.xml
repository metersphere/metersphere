<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.MockExpectConfigMapper">
    <resultMap id="BaseResultMap" type="io.metersphere.base.domain.MockExpectConfig">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="mock_config_id" jdbcType="VARCHAR" property="mockConfigId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="tags" jdbcType="VARCHAR" property="tags"/>
        <result column="STATUS" jdbcType="VARCHAR" property="status"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
        <result column="create_user_id" jdbcType="VARCHAR" property="createUserId"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
               type="io.metersphere.base.domain.MockExpectConfigWithBLOBs">
        <result column="request" jdbcType="LONGVARCHAR" property="request"/>
        <result column="response" jdbcType="LONGVARCHAR" property="response"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, mock_config_id, `name`, tags, `STATUS`, create_time, update_time, create_user_id
    </sql>
    <sql id="Blob_Column_List">
        request, response
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="io.metersphere.base.domain.MockExpectConfigExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from mock_expect_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="io.metersphere.base.domain.MockExpectConfigExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from mock_expect_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from mock_expect_config
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete
        from mock_expect_config
        where id = #{id,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="io.metersphere.base.domain.MockExpectConfigExample">
        delete from mock_expect_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="io.metersphere.base.domain.MockExpectConfigWithBLOBs">
        insert into mock_expect_config (id, mock_config_id, `name`,
                                        tags, `STATUS`, create_time,
                                        update_time, create_user_id, request,
                                        response)
        values (#{id,jdbcType=VARCHAR}, #{mockConfigId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
                #{tags,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT},
                #{updateTime,jdbcType=BIGINT}, #{createUserId,jdbcType=VARCHAR}, #{request,jdbcType=LONGVARCHAR},
                #{response,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="io.metersphere.base.domain.MockExpectConfigWithBLOBs">
        insert into mock_expect_config
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="mockConfigId != null">
                mock_config_id,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="tags != null">
                tags,
            </if>
            <if test="status != null">
                `STATUS`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createUserId != null">
                create_user_id,
            </if>
            <if test="request != null">
                request,
            </if>
            <if test="response != null">
                response,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="mockConfigId != null">
                #{mockConfigId,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                #{tags,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=BIGINT},
            </if>
            <if test="createUserId != null">
                #{createUserId,jdbcType=VARCHAR},
            </if>
            <if test="request != null">
                #{request,jdbcType=LONGVARCHAR},
            </if>
            <if test="response != null">
                #{response,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="io.metersphere.base.domain.MockExpectConfigExample"
            resultType="java.lang.Long">
        select count(*) from mock_expect_config
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update mock_expect_config
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.mockConfigId != null">
                mock_config_id = #{record.mockConfigId,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                `name` = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.tags != null">
                tags = #{record.tags,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                `STATUS` = #{record.status,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=BIGINT},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=BIGINT},
            </if>
            <if test="record.createUserId != null">
                create_user_id = #{record.createUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.request != null">
                request = #{record.request,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.response != null">
                response = #{record.response,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update mock_expect_config
        set id = #{record.id,jdbcType=VARCHAR},
        mock_config_id = #{record.mockConfigId,jdbcType=VARCHAR},
        `name` = #{record.name,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        `STATUS` = #{record.status,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=BIGINT},
        update_time = #{record.updateTime,jdbcType=BIGINT},
        create_user_id = #{record.createUserId,jdbcType=VARCHAR},
        request = #{record.request,jdbcType=LONGVARCHAR},
        response = #{record.response,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update mock_expect_config
        set id = #{record.id,jdbcType=VARCHAR},
        mock_config_id = #{record.mockConfigId,jdbcType=VARCHAR},
        `name` = #{record.name,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        `STATUS` = #{record.status,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=BIGINT},
        update_time = #{record.updateTime,jdbcType=BIGINT},
        create_user_id = #{record.createUserId,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="io.metersphere.base.domain.MockExpectConfigWithBLOBs">
        update mock_expect_config
        <set>
            <if test="mockConfigId != null">
                mock_config_id = #{mockConfigId,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                tags = #{tags,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `STATUS` = #{status,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
            <if test="createUserId != null">
                create_user_id = #{createUserId,jdbcType=VARCHAR},
            </if>
            <if test="request != null">
                request = #{request,jdbcType=LONGVARCHAR},
            </if>
            <if test="response != null">
                response = #{response,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.metersphere.base.domain.MockExpectConfigWithBLOBs">
        update mock_expect_config
        set mock_config_id = #{mockConfigId,jdbcType=VARCHAR},
            `name`         = #{name,jdbcType=VARCHAR},
            tags           = #{tags,jdbcType=VARCHAR},
            `STATUS`       = #{status,jdbcType=VARCHAR},
            create_time    = #{createTime,jdbcType=BIGINT},
            update_time    = #{updateTime,jdbcType=BIGINT},
            create_user_id = #{createUserId,jdbcType=VARCHAR},
            request        = #{request,jdbcType=LONGVARCHAR},
            response       = #{response,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="io.metersphere.base.domain.MockExpectConfig">
        update mock_expect_config
        set mock_config_id = #{mockConfigId,jdbcType=VARCHAR},
            `name`         = #{name,jdbcType=VARCHAR},
            tags           = #{tags,jdbcType=VARCHAR},
            `STATUS`       = #{status,jdbcType=VARCHAR},
            create_time    = #{createTime,jdbcType=BIGINT},
            update_time    = #{updateTime,jdbcType=BIGINT},
            create_user_id = #{createUserId,jdbcType=VARCHAR}
        where id = #{id,jdbcType=VARCHAR}
    </update>
</mapper>
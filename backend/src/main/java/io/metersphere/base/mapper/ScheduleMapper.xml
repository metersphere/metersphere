<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ScheduleMapper">
  <resultMap id="BaseResultMap" type="io.metersphere.base.domain.Schedule">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="key" jdbcType="VARCHAR" property="key" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="value" jdbcType="VARCHAR" property="value" />
    <result column="group" jdbcType="VARCHAR" property="group" />
    <result column="job" jdbcType="VARCHAR" property="job" />
    <result column="enable" jdbcType="BIT" property="enable" />
    <result column="resource_id" jdbcType="VARCHAR" property="resourceId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="workspace_id" jdbcType="VARCHAR" property="workspaceId" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.metersphere.base.domain.Schedule">
    <result column="custom_data" jdbcType="LONGVARCHAR" property="customData" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `key`, `type`, `value`, `group`, job, `enable`, resource_id, user_id, workspace_id, 
    create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    custom_data
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.metersphere.base.domain.ScheduleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="io.metersphere.base.domain.ScheduleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from schedule
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from schedule
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="io.metersphere.base.domain.ScheduleExample">
    delete from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.metersphere.base.domain.Schedule">
    insert into schedule (id, `key`, `type`, 
      `value`, `group`, job, 
      `enable`, resource_id, user_id, 
      workspace_id, create_time, update_time, 
      custom_data)
    values (#{id,jdbcType=VARCHAR}, #{key,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{value,jdbcType=VARCHAR}, #{group,jdbcType=VARCHAR}, #{job,jdbcType=VARCHAR}, 
      #{enable,jdbcType=BIT}, #{resourceId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{workspaceId,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, 
      #{customData,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.metersphere.base.domain.Schedule">
    insert into schedule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="key != null">
        `key`,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="group != null">
        `group`,
      </if>
      <if test="job != null">
        job,
      </if>
      <if test="enable != null">
        `enable`,
      </if>
      <if test="resourceId != null">
        resource_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="workspaceId != null">
        workspace_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="customData != null">
        custom_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="key != null">
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        #{value,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        #{group,jdbcType=VARCHAR},
      </if>
      <if test="job != null">
        #{job,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=BIT},
      </if>
      <if test="resourceId != null">
        #{resourceId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="workspaceId != null">
        #{workspaceId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="customData != null">
        #{customData,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.metersphere.base.domain.ScheduleExample" resultType="java.lang.Long">
    select count(*) from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update schedule
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.key != null">
        `key` = #{record.key,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=VARCHAR},
      </if>
      <if test="record.group != null">
        `group` = #{record.group,jdbcType=VARCHAR},
      </if>
      <if test="record.job != null">
        job = #{record.job,jdbcType=VARCHAR},
      </if>
      <if test="record.enable != null">
        `enable` = #{record.enable,jdbcType=BIT},
      </if>
      <if test="record.resourceId != null">
        resource_id = #{record.resourceId,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.workspaceId != null">
        workspace_id = #{record.workspaceId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.customData != null">
        custom_data = #{record.customData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update schedule
    set id = #{record.id,jdbcType=VARCHAR},
      `key` = #{record.key,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=VARCHAR},
      `group` = #{record.group,jdbcType=VARCHAR},
      job = #{record.job,jdbcType=VARCHAR},
      `enable` = #{record.enable,jdbcType=BIT},
      resource_id = #{record.resourceId,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      workspace_id = #{record.workspaceId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      custom_data = #{record.customData,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update schedule
    set id = #{record.id,jdbcType=VARCHAR},
      `key` = #{record.key,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=VARCHAR},
      `group` = #{record.group,jdbcType=VARCHAR},
      job = #{record.job,jdbcType=VARCHAR},
      `enable` = #{record.enable,jdbcType=BIT},
      resource_id = #{record.resourceId,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      workspace_id = #{record.workspaceId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.metersphere.base.domain.Schedule">
    update schedule
    <set>
      <if test="key != null">
        `key` = #{key,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        `group` = #{group,jdbcType=VARCHAR},
      </if>
      <if test="job != null">
        job = #{job,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        `enable` = #{enable,jdbcType=BIT},
      </if>
      <if test="resourceId != null">
        resource_id = #{resourceId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="workspaceId != null">
        workspace_id = #{workspaceId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="customData != null">
        custom_data = #{customData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.metersphere.base.domain.Schedule">
    update schedule
    set `key` = #{key,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=VARCHAR},
      `group` = #{group,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=BIT},
      resource_id = #{resourceId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      workspace_id = #{workspaceId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      custom_data = #{customData,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.metersphere.base.domain.Schedule">
    update schedule
    set `key` = #{key,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=VARCHAR},
      `group` = #{group,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=BIT},
      resource_id = #{resourceId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      workspace_id = #{workspaceId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtScheduleMapper">
    <insert id="insert" parameterType="io.metersphere.api.dto.definition.ApiSwaggerUrlDTO">
        insert into swagger_url_project (id, `project_id`, `swagger_url`,
                                         `schedule_id`)
        values (#{apiSwaggerUrlDTO.id,jdbcType=VARCHAR}, #{apiSwaggerUrlDTO.projectId,jdbcType=VARCHAR}, #{apiSwaggerUrlDTO.swaggerUrl,jdbcType=VARCHAR},
                #{apiSwaggerUrlDTO.scheduleId,jdbcType=VARCHAR})
    </insert>
    <select id="list" resultType="io.metersphere.dto.ScheduleDao">
        select schedule.* from schedule
        <where>
            <if test="request.group != null">
                and schedule.group = #{request.group}
            </if>
            <if test="request.workspaceId != null">
                and schedule.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                and schedule.project_id = #{request.projectId}
            </if>
            <if test="request.enable != null">
                and schedule.enable = #{request.enable}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='type'">
                                and schedule.group in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="countTaskByProjectId" resultType="java.lang.Long">
        SELECT COUNT(id) AS countNumber
        FROM `schedule`
        WHERE resource_id IN (
            SELECT id FROM api_scenario WHERE project_id = #{0,jdbcType=VARCHAR} AND status != 'Trash'
        )
    </select>
    <select id="countTaskByProjectIdAndCreateTimeRange" resultType="java.lang.Long">
        SELECT COUNT(id) AS countNumber
        FROM `schedule`
        WHERE resource_id IN (
            SELECT scene.id
            FROM api_scenario scene
            WHERE scene.project_id = #{projectId,jdbcType=VARCHAR}
              AND scene.status != 'Trash'
        )
          AND create_time BETWEEN #{startTime} and #{endTime}
    </select>
    <select id="findRunningTaskInfoByProjectID" resultType="io.metersphere.api.dto.datacount.response.TaskInfoResult">
        SELECT sch.id AS taskID,
           sch.`name` AS `name`,
           sch.`value`     AS rule,
           sch.`enable`    AS `taskStatus`,
           sch.update_time AS updateTime,
           sch.id          AS taskID,
           sch.`value`     AS rule,
           sch.`enable`    AS `taskStatus`,
           u.`name`        AS creator,
           sch.update_time AS updateTime,
           sch.type      AS taskType,
           sch.`group`    AS taskGroup,
           sch.resource_id  AS scenarioId
        FROM (
          schedule sch left join user u
          ON sch.user_id = u.id
        )
        WHERE sch.`enable` = true
          AND sch.project_id = #{projectId,jdbcType=VARCHAR}

        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='task_type'">
                            and sch.group in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </select>
    <select id="select" resultType="io.metersphere.api.dto.definition.ApiSwaggerUrlDTO">
        select * from swagger_url_project where id=#{id}
    </select>
    <update id="updateNameByResourceID">
        update schedule set name = #{name} where resource_id = #{resourceId}
    </update>
</mapper>

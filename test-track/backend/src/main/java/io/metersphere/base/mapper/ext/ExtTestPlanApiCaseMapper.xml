<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestPlanApiCaseMapper">
    <select id="selectLegalDataByTestPlanId" resultType="io.metersphere.plan.dto.TestPlanApiCaseInfoDTO">
        SELECT a.project_id, t.*
        FROM test_plan_api_case t
                 INNER JOIN api_test_case a ON t.api_case_id = a.id
        WHERE t.test_plan_id = #{0}
          AND (a.status IS NULL OR a.status != 'Trash')
        ORDER BY t.`order` DESC
    </select>

    <select id="selectExecResult" resultType="io.metersphere.plan.dto.CaseExecResult">
        SELECT t.api_case_id AS id,a.name AS caseName,t.status AS execResult
        FROM test_plan_api_case t
        INNER JOIN api_test_case a ON t.api_case_id = a.id
        WHERE t.test_plan_id = #{testPlanId} AND t.api_case_id in
        <foreach collection="apiCaseIds" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
    <select id="selectReportStatusByReportIds"
            resultType="io.metersphere.base.domain.ApiDefinitionExecResult">
        select id,status from api_definition_exec_result
        where id in
        <foreach collection="ids" item="v" separator="," open="(" close=")">
            #{v}
        </foreach>
    </select>


    <select id="findFailureCaseInTestPlanByProjectIDAndExecuteTimeAndLimitNumber"
            resultType="io.metersphere.dto.ExecutedCaseInfoResult">
        SELECT * FROM (
        SELECT testCase.testPlanCaseID AS testPlanCaseID,
        testCase.id AS id,
        testCase.testCaseName AS caseName,
        testCase.testPlanName AS testPlan,
        testCase.testPlanId AS testPlanId,
        caseErrorCountData.dataCountNumber AS failureTimes,
        'apiCase' AS caseType,
        testCase.protocol as protocol,
        testCase.project_id as project_id
        FROM (
        SELECT testPlanCase.id AS testPlanCaseID,
        apiCase.id AS id,
        apiCase.`name` AS testCaseName,
        testPlan.id AS testPlanId,
        testPlan.`name` AS testPlanName,
        api_definition.protocol as protocol,
        api_definition.project_id as project_id
        FROM api_test_case apiCase
        INNER JOIN test_plan_api_case testPlanCase ON testPlanCase.api_case_id = apiCase.id
        INNER JOIN test_plan testPlan ON testPlan.id = testPlanCase.test_plan_id
        INNER JOIN api_definition on api_definition.id = apiCase.api_definition_id
        WHERE
        (apiCase.`status` IS NULL OR apiCase.`status` != 'Trash')
        AND testPlan.project_id = #{projectId}
        ) testCase
        INNER JOIN (SELECT executionInfo.source_id AS sourceId,
        COUNT(executionInfo.id) AS dataCountNumber
        FROM api_case_execution_info executionInfo
        INNER JOIN test_plan_api_case testPlanCase ON executionInfo.source_id = testPlanCase.id
        WHERE executionInfo.`result` = 'ERROR'
        AND executionInfo.create_time > #{startTimestamp}
        <if test="versionId != null">
            AND executionInfo.version = #{versionId}
        </if>
        GROUP BY source_id
        ) caseErrorCountData
        ON caseErrorCountData.sourceId = testCase.testPlanCaseID
        ) showTable ORDER BY showTable.failureTimes DESC LIMIT ${limitNumber}
    </select>
</mapper>

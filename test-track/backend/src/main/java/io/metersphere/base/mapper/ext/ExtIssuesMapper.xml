<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtIssuesMapper">
    <delete id="deleteIssues">
        delete
        from test_case_issues
        where issues_id = #{issuesId}
          and (resource_id = #{resourceId} or ref_id = #{resourceId})
    </delete>

    <select id="getIssuesByCaseId" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select issues.*
        from issues
        inner join test_case_issues
        on test_case_issues.issues_id = issues.id
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <select id="getIssueForMinder" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select issues.id, issues.title , issues.num , test_case_issues.resource_id, test_case_issues.ref_id, test_case_issues.ref_type
        from issues
        inner join test_case_issues
        on test_case_issues.issues_id = issues.id
        where (issues.platform_status != 'delete' or issues.platform_status is NULL)
        <if test="refType == 'FUNCTIONAL'">
            and test_case_issues.resource_id in
            <foreach collection="caseIds" open="(" close=")" item="item" separator=",">
                #{item}
            </foreach>
            or test_case_issues.ref_id in
            <foreach collection="caseIds" open="(" close=")" item="item" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="refType == 'PLAN_FUNCTIONAL'">
            and test_case_issues.resource_id in
            <foreach collection="caseIds" open="(" close=")" item="item" separator=",">
                #{item}
            </foreach>
        </if>
        order by num asc
    </select>

    <sql id="Issue_List_Column">
        issues.id, issues.platform_id, issues.num, ifnull(issues.title, '') as title, issues.project_id, issues.create_time, issues.update_time,
        ifnull(issues.description, '') as description, issues.status, issues.platform, issues.custom_fields, issues.reporter,
        issues.creator,issues.resource_id,issues.platform_status,
        issues.lastmodify
    </sql>

    <select id="getIssues" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select
        <include refid="Issue_List_Column"/>
        <if test="request.projectId != null||request.workspaceId != null">
            , project.name as projectName
        </if>
        from issues
        <if test="request.projectId != null||request.workspaceId != null">
            left join
            project on issues.project_id = project.id
        </if>
        <if test="request.isCustomSorted and request.customFieldId != null">
            left join custom_field_issues cfi on issues.id = cfi.resource_id and cfi.field_id = #{request.customFieldId}
        </if>
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <select id="getPlanIssues" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select
        <include refid="Issue_List_Column"/>
        from issues
        inner join test_case_issues
        on issues.id = test_case_issues.issues_id and test_case_issues.ref_type = 'PLAN_FUNCTIONAL'
        and test_case_issues.resource_id in (
            select id from test_plan_test_case tptc where plan_id = #{request.planId}
        )
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>

    <select id="getNextNum" resultType="io.metersphere.base.domain.Issues">
        SELECT * FROM issues WHERE issues.project_id = #{projectId} ORDER BY num DESC LIMIT 1;
    </select>
    <select id="getCountByStatus" resultType="io.metersphere.dto.IssuesStatusCountDao">
        select count(1) as `count`, if(i.platform = 'Local', cfi.value, i.platform_status) as statusValue, i.platform
        from issues i
                 inner join project p
                            on i.project_id = p.id and p.workspace_id = #{request.workspaceId}
                 left join custom_field_issues cfi
                           on i.id = cfi.resource_id and field_id in (select cf.id
                                                                      from custom_field cf
                                                                               inner join custom_field_template cft on cft.template_id = p.issue_template_id
                                                                      where cf.scene = 'ISSUE'
                                                                        and cf.name = '状态'
                                                                        and (p.workspace_id = #{request.workspaceId} or cf.global = true))
        where i.creator = #{request.creator}
        group by statusValue;
    </select>
    <select id="getRelateIssues" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select issues.id, issues.num, issues.title, issues.project_id, issues.create_time, issues.update_time,
        issues.description, issues.status, issues.platform, issues.custom_fields,test_case_issues.resource_id,issues.platform_status,
        issues.lastmodify
        from issues
        left join
        test_case_issues on issues.id = test_case_issues.issues_id and issues.project_id = #{request.projectId}
        <include refid="queryWhereCondition"/>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
        group by issues.id
    </select>
    <select id="getIssueForSync" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select id, platform, platform_id, create_time, update_time
        from issues
        where project_id = #{projectId} and platform = #{platform} and (platform_status != 'delete' or platform_status is null);
    </select>
    <select id="selectForPlanReport" resultType="io.metersphere.plan.dto.PlanReportIssueDTO">
        select i.id, i.status, i.platform_status, i.platform
        from issues i
        inner join test_case_issues tci
            on i.id = tci.issues_id and tci.ref_type = 'PLAN_FUNCTIONAL' and ( i.platform_status != 'delete' or i.platform_status is null)
        inner join test_plan_test_case tptc
            on tci.resource_id = tptc.id and tptc.plan_id = #{planId}
    </select>
    <select id="selectIdNotInUuIds" resultType="java.lang.String">
        select id from issues
        where project_id = #{projectId} and platform = #{platform} and platform_id not in
        <foreach collection="platformIds" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
    </select>
    <select id="getForCompatibleCustomField" resultType="io.metersphere.dto.CustomFieldResourceCompatibleDTO">
        select id, custom_fields
        from issues
        where project_id = #{projectId}
        limit #{offset},#{pageSize}
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String"  resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select
        <include refid="Issue_List_Column" />
        from issues
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <select id="getIssueCustomField" resultType="io.metersphere.dto.CustomFieldItemDTO">
        select cfi.field_id           as id,
               cf.type,
               cf.name,
               case cf.type
                   when 'richText' then cfi.text_value
                   when 'textarea' then cfi.text_value
                   else cfi.value end as value
        from custom_field_issues cfi
        left join custom_field cf on cf.id = cfi.field_id
        where cfi.resource_id = #{issueId}
    </select>
    <select id="getPlatformIssueByIds" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select * from issues where project_id = #{projectId} and platform_id in
        <foreach collection="ids" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
    </select>

    <select id="getThisWeekIssueCount" resultType="java.lang.Long">
        select count(*) from issues where project_id = #{projectId} and date_sub(curdate(), interval 7 day) &lt;= from_unixtime(round(create_time / 1000, 0)) and id in
        <foreach collection="ids" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
    </select>

    <select id="getTestPlanThisWeekIssue" resultType="java.lang.String">
        select distinct tci.issues_id
        from test_plan_test_case tptc
        join test_plan tp on tp.id = tptc.plan_id
        join test_case_issues tci on tptc.id = tci.resource_id
        where tptc.is_del != 1 and date_sub(curdate(), interval 7 day) &lt;= from_unixtime(round(tci.relate_time / 1000, 0))
          and tp.project_id = #{projectId}
    </select>

    <select id="getTestPlanIssue" resultType="java.lang.String">
        select distinct tci.issues_id
        from test_plan_test_case tptc
                 join test_plan tp on tp.id = tptc.plan_id
                 join test_case_issues tci on tptc.id = tci.resource_id
                 join issues on tci.issues_id = issues.id
        where tptc.is_del != 1 and tp.project_id = #{projectId}
    </select>

    <select id="getIssueCustomFields" resultType="io.metersphere.xpack.track.dto.IssuesDao">
        select cfi.field_id           as fieldId,
               cf.type fieldType,
               cft.custom_data,
               cf.name as fieldName,
               cfi.resource_id as id,
               case cf.type
                   when 'richText' then cfi.text_value
                   when 'textarea' then cfi.text_value
                   else cfi.value end as fieldValue
        from custom_field_issues cfi
                 join custom_field_template cft on cfi.field_id = cft.field_id
                 join custom_field cf on cf.id = cft.field_id
                 join project on project.id = cf.project_id and project.issue_template_id = cft.template_id
        where cfi.resource_id in
        <foreach collection="ids" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
    </select>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                    <property name="objectKey" value="request.combine.tags"/>
                </include>
            </if>
            <if test="request.name != null">
                and (
                      issues.title LIKE CONCAT('%', #{request.name}, '%')
                      or issues.num LIKE CONCAT('%', #{request.name}, '%')
                    )
            </if>
            <if test="request.workspaceId != null">
                AND project.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null and request.projectId != ''">
                and issues.project_id = #{request.projectId}
            </if>

            <if test="request.resourceId != null and request.resourceId != ''">
                and issues.resource_id = #{request.resourceId}
            </if>

            <if test="request.caseResourceId != null and request.caseResourceId != ''">
                <if test="request.refType == 'FUNCTIONAL'">
                    and (test_case_issues.resource_id = #{request.caseResourceId} or test_case_issues.ref_id = #{request.caseResourceId})
                </if>
                <if test="request.refType == 'PLAN_FUNCTIONAL'">
                    and test_case_issues.resource_id = #{request.caseResourceId} and test_case_issues.ref_type
                    ='PLAN_FUNCTIONAL'
                </if>
            </if>

            <if test="request.platform != null and request.platform != ''">
                and issues.platform = #{request.platform}
            </if>
            <if test="request.id != null and request.id != ''">
                and issues.id = #{request.id}
            </if>
            <if test="request.notInIds != null and request.notInIds.size() > 0">
                and issues.id not in
                <foreach collection="request.notInIds" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </if>
            <if test="request.filterIds != null and request.filterIds.size() > 0">
                and issues.id in
                <foreach collection="request.filterIds" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </if>
            <if test="!request.selectAll and request.exportIds != null and request.exportIds.size > 0">
                and issues.id in
                <foreach collection="request.exportIds" item="value" separator="," open="(" close=")">
                    #{value}
                </foreach>
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='status'">
                                and issues.status in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'platform'">
                                AND issues.platform IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key == 'creator'">
                                AND issues.creator IN
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                            <when test="key.startsWith('custom_single')">
                                and issues.id in (
                                select resource_id from custom_field_issues
                                where concat('custom_single-',field_id) = #{key}
                                and trim(both '"' from value) in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                                )
                            </when>
                            <when test="key.startsWith('custom_multiple')">
                                and issues.id in (
                                select resource_id from custom_field_issues
                                where concat('custom_multiple-',field_id) = #{key}
                                and
                                <foreach collection="values" item="value" separator="or" open="(" close=")">
                                    JSON_CONTAINS(value, #{value})
                                </foreach>
                                )
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
            and (issues.platform_status != 'delete' or issues.platform_status is NULL)
        </where>
    </sql>
    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and issues.title
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and issues.creator
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test="${condition}.platform != null">
            and issues.platform
            <include refid="condition">
                <property name="object" value="${condition}.platform"/>
            </include>
        </if>
        <if test="${condition}.followPeople != null">
            and issues.id in (
            select issue_id from issue_follow where follow_id
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.followPeople"/>
            </include>
            )
        </if>
        <if test="${condition}.createTime != null">
            and issues.create_time
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.customs != null and ${condition}.customs.size() > 0">
            <foreach collection="${condition}.customs" item="custom" separator="" open="" close="">
                and issues.id in (
                    select resource_id from custom_field_issues where field_id = #{custom.id}
                    <choose>
                        <when test="custom.type == 'multipleMember' or custom.type == 'checkbox' or custom.type == 'multipleSelect'">
                            and ${custom.value}
                        </when>
                        <when test="custom.type == 'date' or custom.type == 'datetime'">
                            and left(replace(unix_timestamp(trim(both '"' from `value`)), '.', ''), 13)
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <when test="custom.type == 'richText' or custom.type == 'textarea'">
                            and text_value
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </when>
                        <otherwise>
                            and trim(both '"' from value)
                            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                                <property name="object" value="custom"/>
                            </include>
                        </otherwise>
                    </choose>
                )
            </foreach>
        </if>
    </sql>
    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>
</mapper>

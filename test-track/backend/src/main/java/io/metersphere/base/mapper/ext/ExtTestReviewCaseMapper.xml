<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestReviewCaseMapper">
    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="conditionReviewer">
        <choose>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and test_case.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>
        <if test="${condition}.module != null">
            and test_case.node_path
            <include refid="condition">
                <property name="object" value="${condition}.module"/>
            </include>
        </if>
        <if test="${condition}.priority != null">
            and test_case.priority
            <include refid="condition">
                <property name="object" value="${condition}.priority"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and test_case.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.type != null">
            and test_case.type
            <include refid="condition">
                <property name="object" value="${condition}.type"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and test_case.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and test_case.maintainer
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
        <if test="${condition}.reviewer != null">
            <choose>
                <when test='${condition}.reviewer.operator == "not in"'>
                    AND NOT EXISTS
                </when>
                <otherwise>
                    AND EXISTS
                </otherwise>
            </choose>
            (SELECT *
            FROM test_case_review_test_case_users test_case_review_test_case_users
            WHERE test_case_review_test_case_users.case_id = test_case_review_test_case.case_id
            and test_case_review_test_case_users.review_id = test_case_review_test_case.review_id
            and test_case_review_test_case_users.user_id
            <include refid="conditionReviewer">
                <property name="object" value="${condition}.reviewer"/>
            </include>
            )
        </if>
        <if test="${condition}.maintainer != null">
            and test_case.maintainer
            <include refid="condition">
                <property name="object" value="${condition}.maintainer"/>
            </include>
        </if>
    </sql>
    <select id="list" resultType="io.metersphere.dto.TestReviewCaseDTO">
        select test_case_review_test_case.id as id, test_case_review_test_case.reviewer,
        test_case_review_test_case.update_time, test_case_review_test_case.review_id as reviewId,
        test_case.id as caseId, test_case.name, test_case.priority, test_case.test_id as testId,
        test_case.type, test_case.node_path, test_case.num,
        test_case.custom_num, test_case_review_test_case.status review_status,
        test_case.remark as remark, test_case.maintainer, test_case.steps as steps, test_case.node_id as nodeId,
        test_case.project_id,
        test_case_node.name as model, test_case.version_id
        from test_case_review_test_case
        inner join test_case on test_case_review_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id=test_case.node_id
        <include refid="queryWhereCondition"/>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'custom_num'">
                        test_case.custom_num ${order.type}
                    </when>
                    <when test="order.name == 'num'">
                        test_case.num ${order.type}
                    </when>
                    <when test="order.name == 'priority'">
                        test_case.priority ${order.type}
                    </when>
                    <when test="order.name == 'name'">
                        test_case.name ${order.type}
                    </when>
                    <otherwise>
                        test_case_review_test_case.${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>
    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and (test_case.name like CONCAT('%', #{request.name},'%')
                or test_case.num like CONCAT('%', #{request.name},'%')
                or test_case.custom_num like CONCAT('%', #{request.name},'%')
                )
            </if>
            <if test="request.id != null">
                and test_case.id = #{request.id}
            </if>
            <if test="request.nodeIds != null and request.nodeIds.size() > 0">
                and test_case.node_id in
                <foreach collection="request.nodeIds" item="nodeId" separator="," open="(" close=")">
                    #{nodeId}
                </foreach>
            </if>
            <if test="request.status != null">
                and test_case_review_test_case.status = #{request.status}
            </if>
            <if test="request.reviewer != null">
                and test_case_review_test_case.reviewer = #{request.reviewer}
            </if>
            <if test="request.reviewId != null">
                and test_case_review_test_case.review_id = #{request.reviewId}
            </if>
            <include refid="queryVersionCondition">
                <property name="versionTable" value="test_case"/>
            </include>
            <include refid="filter"/>
            and test_case_review_test_case.is_del = 0
        </where>
    </sql>
    <sql id="filter">
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='priority'">
                            and test_case.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='type'">
                            and test_case.type in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='status'">
                            and test_case.review_status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='review_status'">
                            and test_case_review_test_case.status in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='version_id'">
                            and test_case.version_id in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                        <when test="key=='reviewer_name'">
                            AND EXISTS(SELECT *
                            FROM test_case_review_test_case_users test_case_review_test_case_users
                            WHERE test_case_review_test_case_users.case_id = test_case_review_test_case.case_id
                            and test_case_review_test_case_users.review_id = test_case_review_test_case.review_id
                            and test_case_review_test_case_users.user_id in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                            )
                        </when>
                        <when test="key=='maintainer_name'">
                            and test_case.maintainer in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
    </sql>

    <select id="selectIds" resultType="java.lang.String">
        select test_case_review_test_case.id as id
        from test_case_review_test_case
        inner join test_case on test_case_review_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id=test_case.node_id
        inner join project on project.id = test_case.project_id
        <include refid="queryWhereCondition"/>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'num'">
                        test_case.num ${order.type}
                    </when>
                    <when test="order.name == 'custom_num'">
                        test_case.custom_num ${order.type}
                    </when>
                    <otherwise>
                        test_case_review_test_case.${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>

    <select id="selectTestCaseIds" resultType="java.lang.String">
        select distinct test_case.id as id
        from test_case_review_test_case
        inner join test_case on test_case_review_test_case.case_id = test_case.id
        left join test_case_node on test_case_node.id=test_case.node_id
        inner join project on project.id = test_case.project_id
        <include refid="queryWhereCondition"/>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                <choose>
                    <when test="order.name == 'num' || order.name == 'custom_num' || order.name == 'priority' || order.name == 'name'">
                        test_case.${order.name} ${order.type}
                    </when>
                    <otherwise>
                        test_case_review_test_case.${order.name} ${order.type}
                    </otherwise>
                </choose>
            </foreach>
        </if>
    </select>

    <select id="get" resultType="io.metersphere.dto.TestReviewCaseDTO">
        select test_case_review_test_case.id id, test_case_review_test_case.case_id caseId,
               test_case.remark, test_case_review_test_case.status review_status, test_case.status status, test_case.*,
               test_case_review_test_case.*, test_case_node.name as model, project.name as projectName
        from test_case_review_test_case
                 inner join test_case on test_case_review_test_case.case_id = test_case.id
                 left join test_case_node on test_case_node.id=test_case.node_id
                 inner join project on project.id = test_case.project_id
        where test_case_review_test_case.id = #{id}
    </select>

    <select id="getStatusByReviewId" resultType="java.lang.String">
        SELECT
            status
        FROM
            test_case_review_test_case
        WHERE
            review_id = #{reviewId} and is_del = 0;
    </select>

    <select id="findRelateTestReviewId" resultType="java.lang.String">
        select distinct test_case_review_test_case.review_id from test_case_review_test_case
        inner join test_case_review on test_case_review_test_case.review_id = test_case_review.id
        inner join project on project.id = test_case_review.project_id
        where test_case_review_test_case.review_id = #{userId}
        and project.workspace_id = #{workspaceId}
        and test_case_review.project_id = #{projectId}
    </select>
    <select id="listForMinder" resultType="io.metersphere.dto.TestReviewCaseDTO">
        select tcrtc.id as id,
        tcrtc.review_id as reviewId,
               test_case.id as caseId, test_case.name, test_case.priority,
               test_case.type, test_case.node_path, tcrtc.status,
               test_case.remark as remark, test_case.maintainer, test_case.steps as steps,
               test_case.node_id as nodeId,
               test_case.prerequisite, test_case.step_description, test_case.expected_result, test_case.step_model
        from test_case_review_test_case tcrtc
        inner join test_case
        on tcrtc.case_id = test_case.id
        <where>
            tcrtc.review_id = #{request.reviewId}
            and test_case.node_id = #{request.nodeId}
            and test_case.status != 'Trash'
        </where>
        <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.orders"/>
    </select>


    <select id="selectReviewIds" resultType="java.lang.String">
        select DISTINCT review_id from test_case_review_test_case;
    </select>
    <select id="getIdsOrderByUpdateTime" resultType="java.lang.String">
        select id from test_case_review_test_case where review_id = #{reviewId} order by update_time ASC;
    </select>

    <select id="getLastOrder" resultType="java.lang.Long">
        select `order` from test_case_review_test_case where review_id = #{reviewId}
        <if test="baseOrder != null">
            and `order` &gt; #{baseOrder}
        </if>
        order by `order` desc limit 1;
    </select>

    <select id="getPreOrder" resultType="java.lang.Long">
        select `order` from test_case_review_test_case where review_id = #{reviewId}
        <if test="baseOrder != null">
            and `order` &lt; #{baseOrder}
        </if>
        order by `order` desc limit 1;
    </select>
    <select id="getStatusMapByReviewId" resultType="io.metersphere.dto.CountMapDTO">
        select status as `key`, count(*) as `value`
        from test_case_review_test_case
        where review_id = #{reviewId} and is_del = 0
        group by status
    </select>
    <select id="projectIdsByPlanId" resultType="java.lang.String">
        select distinct project_id
        from test_case_review_test_case
        inner join test_case on test_case_review_test_case.case_id = test_case.id
    </select>
    <select id="getTestReviewCountNodes" resultType="io.metersphere.dto.TestCaseNodeDTO">
        select tcn.id, count(*) as caseNum, test_case.project_id
        from test_case_review_test_case
        inner join test_case on test_case_review_test_case.case_id = test_case.id
        left join test_case_node tcn on test_case.node_id = tcn.id
        <include refid="queryWhereCondition"/>
        group by tcn.id;
    </select>
    <sql id="queryVersionCondition">
        <if test="request.versionId != null">
            and ${versionTable}.version_id = #{request.versionId}
        </if>
        <if test="request.refId != null">
            and ${versionTable}.ref_id = #{request.refId}
        </if>
    </sql>
</mapper>
